name: Publish

on:
  push:
    tags: ["v*"]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Initialize Dependencies
        run: |
          # Remove existing lockfile
          rm -f deno.lock

          # Cache and create fresh lockfile
          deno cache --lock=deno.lock --lock-write mod.ts

          # Verify dependencies
          deno cache --reload --lock=deno.lock mod.ts

      - name: Setup Test Environment
        run: |
          # Create and set permissions for temp directories
          sudo mkdir -p /tmp/test_tmp /tmp/deno_dir
          sudo chmod -R 777 /tmp/test_tmp /tmp/deno_dir

          # Create test directories with proper permissions
          mkdir -p tests/fixtures/{templates,plugins,locales,tmp,dynamic,generated}
          chmod -R 777 tests/fixtures

          # Initialize test data and cache
          deno task test:init
          deno task test:cache

      - name: Pre-Test Cache
        run: |
          # Cache any dynamic files
          if [ -d "tests/plugins" ] && [ -n "$(ls -A tests/plugins)" ]; then
            deno cache tests/plugins/*.ts || true
          fi

          # Cache test fixtures if they exist
          if [ -d "tests/fixtures/dynamic" ] && [ -n "$(ls -A tests/fixtures/dynamic)" ]; then
            deno cache tests/fixtures/dynamic/*.ts || true
          fi

      - name: Run Tests with Coverage
        env:
          DENO_DIR: /tmp/deno_dir
          TMPDIR: /tmp/test_tmp
          TEST_MODE: ci
          NO_COLOR: true
          DEBUG: true
          LOCALE: en
        run: |
          # Create coverage directory
          mkdir -p coverage

          # Run tests with coverage collection
          deno test --allow-all --coverage=coverage --parallel

          # Ensure proper permissions on coverage directory
          sudo chown -R $USER:$USER coverage

          # Wait for file system to sync
          sleep 2

          # Generate coverage report with retries
          max_attempts=3
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            if deno coverage coverage --lcov > coverage.lcov; then
              break
            else
              echo "Coverage generation attempt $attempt failed"
              if [ $attempt -eq $max_attempts ]; then
                echo "Failed to generate coverage after $max_attempts attempts"
                exit 1
              fi
              attempt=$((attempt + 1))
              echo "Retrying coverage generation..."
              sleep 2
            fi
          done

      - name: Build Binaries
        run: |
          mkdir -p dist
          deno compile --target x86_64-unknown-linux-gnu --output dist/stega-linux mod.ts
          deno compile --target x86_64-pc-windows-msvc --output dist/stega-windows.exe mod.ts
          deno compile --target x86_64-apple-darwin --output dist/stega-macos mod.ts

      - name: Run Verification
        run: deno task verify

      - name: Verify Package
        run: deno publish --dry-run

      - name: Publish to JSR
        if: startsWith(github.ref, 'refs/tags/v')
        run: deno publish
