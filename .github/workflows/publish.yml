name: Publish

on:
  push:
    tags: ["v*"]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Initialize Dependencies and Generate Lockfile
        run: |
          # Remove existing lockfile
          rm -f deno.lock

          # Initialize cache and create new lockfile
          echo "Initializing cache..."
          deno cache mod.ts

          echo "Creating lockfile..."
          deno cache --lock=deno.lock --lock-write mod.ts

          echo "Verifying dependencies..."
          deno cache --reload --lock=deno.lock mod.ts

          # Verify lockfile
          if [ ! -s deno.lock ]; then
              echo "Error: Lockfile generation failed"
              exit 1
          fi

          # Cache all source files
          echo "Caching source files..."
          find src -name "*.ts" -type f -exec deno cache {} +

      - name: Setup Test Environment
        run: |
          # Create test directories
          mkdir -p tests/fixtures/{templates,plugins,locales,tmp,dynamic}
          chmod -R 777 tests/fixtures

          # Create and set permissions for temp directories
          sudo mkdir -p /tmp/test_tmp /tmp/deno_dir
          sudo chmod -R 777 /tmp/test_tmp /tmp/deno_dir
          sudo chown -R $USER:$USER /tmp/test_tmp /tmp/deno_dir

          # Initialize test data
          echo "Initializing test environment..."
          deno task test:init || true

      - name: Run Tests with Coverage
        env:
          DENO_DIR: ~/.cache/deno
          TMPDIR: /tmp/test_tmp
          TEST_MODE: ci
          NO_COLOR: true
          DEBUG: true
          PRESERVE_TEST_FILES: "1"
        run: |
          # Clean and prepare cache directory
          sudo rm -rf ~/.cache/deno
          sudo mkdir -p ~/.cache/deno
          sudo chmod -R 777 ~/.cache/deno

          # Run tests first to generate all test files
          echo "Running initial test pass..."
          deno test --allow-all || exit 1

          # Wait for file system
          sleep 2

          # Cache any generated test files
          echo "Caching test files..."
          sudo find tests/fixtures -name "*.ts" -type f -exec deno cache {} + || true

          # Run tests again with coverage
          echo "Running tests with coverage..."
          deno test --allow-all --coverage=coverage --parallel

          # Ensure proper permissions
          sudo chown -R $USER:$USER coverage
          sudo chmod -R 777 coverage

          # Generate coverage report
          echo "Generating coverage report..."
          deno coverage coverage --lcov > coverage.lcov

      - name: Build Binaries
        run: |
          mkdir -p dist
          deno compile --target x86_64-unknown-linux-gnu --output dist/stega-linux mod.ts
          deno compile --target x86_64-pc-windows-msvc --output dist/stega-windows.exe mod.ts
          deno compile --target x86_64-apple-darwin --output dist/stega-macos mod.ts

      - name: Run Verification
        run: deno task verify

      - name: Verify Package
        run: deno publish --dry-run

      - name: Publish to JSR
        if: startsWith(github.ref, 'refs/tags/v')
        run: deno publish
