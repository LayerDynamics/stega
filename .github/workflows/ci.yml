name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Initialize Dependencies
        run: |
          rm -f deno.lock
          deno cache --reload mod.ts
          deno cache --lock=deno.lock --lock-write mod.ts
          deno cache --lock=deno.lock mod.ts

      - name: Cache Deno Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/deno
            ~/.deno
            /tmp/1491d1ce2c88246d
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json', '**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Clean Temporary Directories
        run: rm -rf /tmp/1491d1ce2c88246d || true

      - name: Ensure Temporary Directory
        run: mkdir -p /tmp/1491d1ce2c88246d || true

      - name: Deno Version
        run: deno --version

      - name: Verify Formatting
        run: deno fmt --check

      - name: Run Linter
        run: deno lint

      - name: Clean Coverage Data
        run: deno task test:clean

      - name: Clear Deno Cache
        run: deno cache --reload mod.ts

      - name: Create Locales Directory
        run: |
          mkdir -p locales
          echo '{}' > locales/en.json

      - name: Create Test Directories
        run: |
          mkdir -p locales tests/fixtures/dynamic tmp
          echo '{}' > locales/en.json
          chmod -R 755 locales tests/fixtures tmp

      - name: Setup Test Environment
        run: |
          mkdir -p /tmp/test_tmp /tmp/deno_dir locales tests/fixtures/dynamic
          chmod -R 755 /tmp/test_tmp /tmp/deno_dir locales tests/fixtures
          echo '{}' > locales/en.json
          echo '{}' > tests/fixtures/default.json

      - name: Run Tests with Coverage
        timeout-minutes: 15
        env:
          DENO_DIR: /tmp/deno_dir
          TMPDIR: /tmp/test_tmp
          TEST_MODE: ci
        run: |
          deno test \
            --allow-read="/tmp/test_tmp,/tmp/deno_dir,./locales,./src,./tests,./mod.ts,./" \
            --allow-env \
            --allow-write="/tmp/test_tmp,/tmp/deno_dir,./cov,./tests/fixtures,." \
            --allow-run \
            --allow-net \
            --coverage=cov \
            --parallel \
            --no-check \
            --fail-fast || \
          deno test \
            --allow-read="/tmp/test_tmp,/tmp/deno_dir,./locales,./src,./tests,./mod.ts,./" \
            --allow-env \
            --allow-write="/tmp/test_tmp,/tmp/deno_dir,./cov,./tests/fixtures,." \
            --allow-run \
            --allow-net \
            --coverage=cov \
            --parallel \
            --no-check \
            --fail-fast

      - name: List Directory State
        if: always()
        run: |
          echo "=== Test Temp Directory ==="
          ls -la /tmp/test_tmp || true
          echo "=== Deno Directory ==="
          ls -la /tmp/deno_dir || true
          echo "=== Current Directory ==="
          ls -la .
          echo "=== Fixtures Directory ==="
          ls -la tests/fixtures || true

      - name: List Test Directories
        if: always()
        run: |
          echo "=== Temporary Directory ==="
          ls -la /tmp/test_tmp || true
          echo "=== Deno Directory ==="
          ls -la /tmp/deno_dir || true
          echo "=== Coverage Directory ==="
          ls -la cov || true

      - name: List Temporary Directory Contents
        run: ls -R /tmp/1491d1ce2c88246d

      - name: Build Verification
        run: |
          deno task build:linux
          deno task build:windows
          deno task build:macos
          
      - name: Upload Coverage Results
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: |
            cov.lcov
            cov/
          if-no-files-found: error

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
          if-no-files-found: error

      - name: Upload Lockfile
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: deno-lockfile
          path: deno.lock
          if-no-files-found: warn

      - name: Cache Cleanup
        if: always()
        run: deno cache --reload mod.ts