name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Initialize Dependencies
        run: |
          rm -f deno.lock
          deno cache --reload mod.ts
          deno cache --lock=deno.lock --lock-write mod.ts
          deno cache --lock=deno.lock mod.ts

      - name: Cache Deno Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/deno.json', '**/deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Clean Temporary Directories
        run: rm -rf /tmp/1491d1ce2c88246d || true

      - name: Ensure Temporary Directory
        run: mkdir -p /tmp/1491d1ce2c88246d || true

      - name: Deno Version
        run: deno --version

      - name: Verify Formatting
        run: deno fmt --check

      - name: Run Linter
        run: deno lint

      - name: Clean Coverage Data
        run: |
          rm -rf coverage coverage.lcov cov cov.lcov ./tmp || true
          mkdir -p coverage
          mkdir -p cov

      - name: Clear Deno Cache
        run: deno cache --reload mod.ts

      - name: Setup Test Environment
        run: |
          # Ensure clean state
          rm -rf /tmp/test_tmp /tmp/deno_dir ./tmp tests/fixtures/dynamic locales
          
          # Create all required directories
          mkdir -p /tmp/test_tmp /tmp/deno_dir ./tmp tests/fixtures/{dynamic,generated} locales
          
          # Initialize locale file before tests
          cat > locales/en.json << 'EOF'
          {
            "available_commands": "Available Commands:",
            "use_help": "Use '{command} --help' for more information",
            "command_not_found": "Command \"{command}\" not found.",
            "missing_required_flag": "Missing required flag: {flag}",
            "invalid_flag_value": "Invalid value for flag '{flag}': {value}",
            "command": "Command",
            "options": "Options",
            "help_text": "Shows help information",
            "default": "default",
            "subcommand_not_found": "Subcommand \"{subcommand}\" not found.",
            "no_command_provided": "No command provided.",
            "error": "Error: {message}",
            "debug": "Debug: {message}",
            "info": "Info: {message}",
            "warning": "Warning: {message}"
          }
          EOF
          
          # Set permissions recursively
          chmod -R 777 /tmp/test_tmp /tmp/deno_dir ./tmp tests/fixtures locales coverage cov
          
          # Verify locale file
          cat locales/en.json
          
          # Cache test files
          deno cache --reload tests/**/*.ts src/**/*.ts

      - name: Run Tests with Coverage
        timeout-minutes: 15
        env:
          DENO_DIR: /tmp/deno_dir
          TMPDIR: /tmp/test_tmp
          TEST_MODE: ci
          NO_COLOR: true
          DEBUG: true
          LOCALE: en
          DENO_PERMISSIONS: allow-all
        run: |
          # Run tests with coverage
          deno test \
            --allow-all \
            --coverage=coverage \
            --parallel \
            --no-check \
            --trace-ops || exit 1
          
          # Copy coverage files to cov directory for artifact upload
          cp -R coverage/* cov/ || true

      - name: Generate Coverage Report
        if: success()
        run: |
          # List coverage files
          echo "Coverage files in coverage/:"
          ls -la coverage/
          echo "Coverage files in cov/:"
          ls -la cov/

          # Generate coverage reports in both locations to ensure we have one that works
          deno coverage coverage --lcov > coverage.lcov || true
          deno coverage cov --lcov > cov.lcov || true
          
          # Verify at least one coverage file exists
          if [ ! -f coverage.lcov ] && [ ! -f cov.lcov ]; then
            echo "Error: Failed to generate coverage report in either location"
            exit 1
          fi

      - name: Debug Test Environment
        if: always()
        run: |
          echo "=== Test Environment ==="
          printenv | sort
          echo "=== Directory Structure ==="
          tree -a -L 3 || find . -type d -maxdepth 3
          echo "=== Test Files ==="
          find tests -type f -name "*.ts"
          echo "=== Coverage Files ==="
          echo "coverage/:"
          ls -la coverage/ || true
          echo "cov/:"
          ls -la cov/ || true

      # ... [rest of the workflow remains unchanged]
      
      - name: Build Verification
        run: |
          deno task build:linux
          deno task build:windows
          deno task build:macos
          
      - name: Upload Coverage Results
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: |
            cov.lcov
            coverage.lcov
            cov/
            coverage/
          retention-days: 14
          compression-level: 9
          if-no-files-found: error

      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
          retention-days: 14
          compression-level: 6
          if-no-files-found: error

      - name: Upload Lockfile
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deno-lockfile
          path: deno.lock
          retention-days: 7
          compression-level: 9
          if-no-files-found: warn

      - name: Cache Cleanup
        if: always()
        run: deno cache --reload mod.ts