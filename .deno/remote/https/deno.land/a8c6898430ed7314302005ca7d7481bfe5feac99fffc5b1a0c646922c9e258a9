// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.

import { assert } from "../assert/assert.ts";
import { assertPath, isPathSeparator } from "./_util.ts";
import { posixNormalize, windowsNormalize } from "./_normalize.ts";

/**
 * Join all given a sequence of `paths`,then normalizes the resulting path.
 * @param paths to be joined and normalized
 */
export function posixJoin(...paths: string[]): string {
  if (paths.length === 0) return ".";

  let joined: string | undefined;
  for (let i = 0, len = paths.length; i < len; ++i) {
    const path = paths[i];
    assertPath(path);
    if (path.length > 0) {
      if (!joined) joined = path;
      else joined += `/${path}`;
    }
  }
  if (!joined) return ".";
  return posixNormalize(joined);
}

/**
 * Join all given a sequence of `paths`,then normalizes the resulting path.
 * @param paths to be joined and normalized
 */
export function windowsJoin(...paths: string[]): string {
  if (paths.length === 0) return ".";

  let joined: string | undefined;
  let firstPart: string | null = null;
  for (let i = 0; i < paths.length; ++i) {
    const path = paths[i];
    assertPath(path);
    if (path.length > 0) {
      if (joined === undefined) joined = firstPart = path;
      else joined += `\\${path}`;
    }
  }

  if (joined === undefined) return ".";

  // Make sure that the joined path doesn't start with two slashes, because
  // normalize() will mistake it for an UNC path then.
  //
  // This step is skipped when it is very clear that the user actually
  // intended to point at an UNC path. This is assumed when the first
  // non-empty string arguments starts with exactly two slashes followed by
  // at least one more non-slash character.
  //
  // Note that for normalize() to treat a path as an UNC path it needs to
  // have at least 2 components, so we don't filter for that here.
  // This means that the user can use join to construct UNC paths from
  // a server name and a share name; for example:
  //   path.join('//server', 'share') -> '\\\\server\\share\\')
  let needsReplace = true;
  let slashCount = 0;
  assert(firstPart !== null);
  if (isPathSeparator(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
          else {
            // We matched a UNC path in the first part
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    // Find any more consecutive slashes we need to replace
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
    }

    // Replace the slashes if needed
    if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
  }

  return windowsNormalize(joined);
}

// denoCacheMetadata={"headers":{"x-content-type-options":"nosniff","access-control-allow-origin":"*","date":"Mon, 13 Jan 2025 04:45:54 GMT","referrer-policy":"strict-origin-when-cross-origin","x-amz-replication-status":"COMPLETED","cross-origin-resource-policy":"same-origin","cross-origin-embedder-policy":"same-origin","content-length":"2990","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","age":"109391","strict-transport-security":"max-age=63072000; includeSubDomains; preload","via":"http/2 edgeproxy-h","accept-ranges":"bytes","x-frame-options":"DENY","etag":"\"d7b4f879c7b99ddc346a2dde40e08f9d\"","content-type":"application/typescript; charset=utf-8","x-amz-cf-pop":"IAD12-P5","vary":"Accept-Encoding, Origin","x-cache":"Hit from cloudfront","last-modified":"Wed, 27 Sep 2023 04:05:42 GMT","x-amz-cf-id":"zlQUyEw2xdQY08vdHMLAMy4kF24gOjhHeNB6loPSlUlKbKuUd1nc8A==","x-amz-version-id":"Rb357eYlXFOGZ4fp7OVgYXPVaMomTE1f","server":"deno/gcp-us-east4","cross-origin-opener-policy":"same-origin","server-timing":"fetchSource;dur=32","x-amz-server-side-encryption":"AES256","cache-control":"public, max-age=31536000, immutable"},"url":"https://deno.land/std@0.203.0/path/_join.ts","time":1736852944}