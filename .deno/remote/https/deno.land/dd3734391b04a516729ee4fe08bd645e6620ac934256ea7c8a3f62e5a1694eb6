// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.

import { CHAR_COLON } from "./_constants.ts";
import {
  assertPath,
  isPathSeparator,
  isPosixPathSeparator,
  isWindowsDeviceRoot,
  stripTrailingSeparators,
} from "./_util.ts";

function assertArg(path: string) {
  assertPath(path);
  if (path.length === 0) return ".";
}

/**
 * Return the directory path of a `path`.
 * @param path - path to extract the directory from.
 */
export function posixDirname(path: string): string {
  assertArg(path);

  let end = -1;
  let matchedNonSeparator = false;

  for (let i = path.length - 1; i >= 1; --i) {
    if (isPosixPathSeparator(path.charCodeAt(i))) {
      if (matchedNonSeparator) {
        end = i;
        break;
      }
    } else {
      matchedNonSeparator = true;
    }
  }

  // No matches. Fallback based on provided path:
  //
  // - leading slashes paths
  //     "/foo" => "/"
  //     "///foo" => "/"
  // - no slash path
  //     "foo" => "."
  if (end === -1) {
    return isPosixPathSeparator(path.charCodeAt(0)) ? "/" : ".";
  }

  return stripTrailingSeparators(
    path.slice(0, end),
    isPosixPathSeparator,
  );
}

/**
 * Return the directory path of a `path`.
 * @param path - path to extract the directory from.
 */
export function windowsDirname(path: string): string {
  assertArg(path);

  const len = path.length;
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code = path.charCodeAt(0);

  // Try to match a root
  if (len > 1) {
    if (isPathSeparator(code)) {
      // Possible UNC root

      rootEnd = offset = 1;

      if (isPathSeparator(path.charCodeAt(1))) {
        // Matched double path separator at beginning
        let j = 2;
        let last = j;
        // Match 1 or more non-path separators
        for (; j < len; ++j) {
          if (isPathSeparator(path.charCodeAt(j))) break;
        }
        if (j < len && j !== last) {
          // Matched!
          last = j;
          // Match 1 or more path separators
          for (; j < len; ++j) {
            if (!isPathSeparator(path.charCodeAt(j))) break;
          }
          if (j < len && j !== last) {
            // Matched!
            last = j;
            // Match 1 or more non-path separators
            for (; j < len; ++j) {
              if (isPathSeparator(path.charCodeAt(j))) break;
            }
            if (j === len) {
              // We matched a UNC root only
              return path;
            }
            if (j !== last) {
              // We matched a UNC root with leftovers

              // Offset by 1 to include the separator after the UNC root to
              // treat it as a "normal root" on top of a (UNC) root
              rootEnd = offset = j + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot(code)) {
      // Possible device root

      if (path.charCodeAt(1) === CHAR_COLON) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator(path.charCodeAt(2))) rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator(code)) {
    // `path` contains just a path separator, exit early to avoid
    // unnecessary work
    return path;
  }

  for (let i = len - 1; i >= offset; --i) {
    if (isPathSeparator(path.charCodeAt(i))) {
      if (!matchedSlash) {
        end = i;
        break;
      }
    } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) {
    if (rootEnd === -1) return ".";
    else end = rootEnd;
  }
  return stripTrailingSeparators(path.slice(0, end), isPosixPathSeparator);
}

// denoCacheMetadata={"headers":{"x-amz-cf-id":"HVuxgFsm2FVU_GE3oequJLVy-spLylKPsP_ashdIOCD_O6WLW1bssg==","content-type":"application/typescript; charset=utf-8","cross-origin-resource-policy":"same-origin","cross-origin-embedder-policy":"same-origin","access-control-allow-origin":"*","server":"deno/gcp-us-east4","x-cache":"Hit from cloudfront","x-content-type-options":"nosniff","age":"109391","cache-control":"public, max-age=31536000, immutable","date":"Mon, 13 Jan 2025 04:45:54 GMT","vary":"Accept-Encoding, Origin","etag":"\"301c2db8d97f34205af2de547c1b9441\"","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","referrer-policy":"strict-origin-when-cross-origin","x-amz-version-id":"5OvjabJFGOgaV5VFMJeN8CHN4h4xpP4O","last-modified":"Wed, 27 Sep 2023 04:05:42 GMT","via":"http/2 edgeproxy-h","x-amz-cf-pop":"IAD12-P5","strict-transport-security":"max-age=63072000; includeSubDomains; preload","x-amz-replication-status":"COMPLETED","accept-ranges":"bytes","x-frame-options":"DENY","x-amz-server-side-encryption":"AES256","cross-origin-opener-policy":"same-origin","content-length":"3695","server-timing":"fetchSource;dur=18"},"url":"https://deno.land/std@0.203.0/path/_dirname.ts","time":1736852944}