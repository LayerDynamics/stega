// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
import { format } from "./_format.ts";
import { AssertionError } from "./assertion_error.ts";
import { buildMessage, diff, diffstr } from "./_diff.ts";
import { CAN_NOT_DISPLAY } from "./_constants.ts";
import { red } from "../fmt/colors.ts";

/**
 * Make an assertion that `actual` and `expected` are strictly equal. If
 * not then throw.
 *
 * @example
 * ```ts
 * import { assertStrictEquals } from "https://deno.land/std@$STD_VERSION/assert/assert_strict_equals.ts";
 *
 * Deno.test("isStrictlyEqual", function (): void {
 *   const a = {};
 *   const b = a;
 *   assertStrictEquals(a, b);
 * });
 *
 * // This test fails
 * Deno.test("isNotStrictlyEqual", function (): void {
 *   const a = {};
 *   const b = {};
 *   assertStrictEquals(a, b);
 * });
 * ```
 */
export function assertStrictEquals<T>(
  actual: unknown,
  expected: T,
  msg?: string,
): asserts actual is T {
  if (Object.is(actual, expected)) {
    return;
  }

  const msgSuffix = msg ? `: ${msg}` : ".";
  let message: string;

  const actualString = format(actual);
  const expectedString = format(expected);

  if (actualString === expectedString) {
    const withOffset = actualString
      .split("\n")
      .map((l) => `    ${l}`)
      .join("\n");
    message =
      `Values have the same structure but are not reference-equal${msgSuffix}\n\n${
        red(withOffset)
      }\n`;
  } else {
    try {
      const stringDiff = (typeof actual === "string") &&
        (typeof expected === "string");
      const diffResult = stringDiff
        ? diffstr(actual as string, expected as string)
        : diff(actualString.split("\n"), expectedString.split("\n"));
      const diffMsg = buildMessage(diffResult, { stringDiff }).join("\n");
      message = `Values are not strictly equal${msgSuffix}\n${diffMsg}`;
    } catch {
      message = `\n${red(CAN_NOT_DISPLAY)} + \n\n`;
    }
  }

  throw new AssertionError(message);
}

// denoCacheMetadata={"headers":{"last-modified":"Wed, 27 Sep 2023 04:05:39 GMT","x-frame-options":"DENY","x-cache":"Hit from cloudfront","server":"deno/gcp-us-east4","cross-origin-resource-policy":"same-origin","etag":"\"4c88e52879ab7916f0b327a574e1c0aa\"","x-content-type-options":"nosniff","x-amz-version-id":"JnZ2WyziQ9Or_icLyDiWUj5sIx7L6jGv","cache-control":"public, max-age=31536000, immutable","accept-ranges":"bytes","cross-origin-embedder-policy":"same-origin","strict-transport-security":"max-age=63072000; includeSubDomains; preload","vary":"Accept-Encoding, Origin","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","via":"http/2 edgeproxy-h","content-type":"application/typescript; charset=utf-8","cross-origin-opener-policy":"same-origin","date":"Tue, 14 Jan 2025 11:06:30 GMT","referrer-policy":"strict-origin-when-cross-origin","x-amz-cf-id":"fFqA60ys2dfSPTJMtvLBZ3HbpDqSrbN8uEnJVnn54AuV5lAUK8xSog==","age":"155","content-length":"1985","access-control-allow-origin":"*","server-timing":"fetchSource;dur=58","x-amz-cf-pop":"IAD12-P5","x-amz-replication-status":"COMPLETED","x-amz-server-side-encryption":"AES256"},"url":"https://deno.land/std@0.203.0/assert/assert_strict_equals.ts","time":1736852944}