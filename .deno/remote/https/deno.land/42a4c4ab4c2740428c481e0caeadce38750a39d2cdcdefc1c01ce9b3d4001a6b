// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.

import { CHAR_DOT } from "../_common/constants.ts";
import { assertPath } from "../_common/assert_path.ts";
import { isPosixPathSeparator } from "./_util.ts";

/**
 * Return the extension of the `path` with leading period.
 *
 * @example
 * ```ts
 * import { extname } from "https://deno.land/std@$STD_VERSION/path/extname.ts";
 *
 * console.log(extname("/home/user/Documents/")); // ""
 * console.log(extname("/home/user/Documents/image.png")); // ".png"
 * ```
 *
 * @param path with extension
 * @returns extension (ex. for `file.ts` returns `.ts`)
 */
export function extname(path: string): string {
  assertPath(path);

  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  let preDotState = 0;
  for (let i = path.length - 1; i >= 0; --i) {
    const code = path.charCodeAt(i);
    if (isPosixPathSeparator(code)) {
      // If we reached a path separator that was not part of a set of path
      // separators at the end of the string, stop now
      if (!matchedSlash) {
        startPart = i + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === CHAR_DOT) {
      // If this is our first dot, mark it as the start of our extension
      if (startDot === -1) startDot = i;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (
    startDot === -1 ||
    end === -1 ||
    // We saw a non-dot character immediately before the dot
    preDotState === 0 ||
    // The (right-most) trimmed path component is exactly '..'
    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
  ) {
    return "";
  }
  return path.slice(startDot, end);
}

// denoCacheMetadata={"headers":{"content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","access-control-allow-origin":"*","cross-origin-embedder-policy":"same-origin","strict-transport-security":"max-age=63072000; includeSubDomains; preload","via":"http/2 edgeproxy-h","referrer-policy":"strict-origin-when-cross-origin","cross-origin-resource-policy":"same-origin","x-content-type-options":"nosniff","accept-ranges":"bytes","cache-control":"public, max-age=31536000, immutable","content-type":"application/typescript; charset=utf-8","date":"Sun, 12 Jan 2025 02:06:45 GMT","x-frame-options":"DENY","last-modified":"Thu, 25 Apr 2024 03:01:10 GMT","server-timing":"fetchSource;dur=38","x-amz-replication-status":"COMPLETED","x-amz-cf-pop":"IAD12-P5","content-length":"2219","server":"deno/gcp-us-east4","x-amz-version-id":"YYJPb3dv3ZMcqggehBB59q1f18rmiv8o","etag":"\"4e3fd1c35834c8981b1c5ea27a5e5171\"","age":"205340","x-amz-cf-id":"B8vEKHL_LkDW8qrYmZ6YxqTC4rcZsKa8BDnnsFEv_0PaxDcWsaRttQ==","cross-origin-opener-policy":"same-origin","x-amz-server-side-encryption":"AES256","vary":"Accept-Encoding, Origin","x-cache":"Hit from cloudfront"},"url":"https://deno.land/std@0.224.0/path/posix/extname.ts","time":1736852944}