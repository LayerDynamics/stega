import { brightBlue, underline, yellow } from "./deps.ts";
import { Figures } from "./figures.ts";
import {
  GenericList,
  GenericListKeys,
  GenericListOption,
  GenericListOptions,
  GenericListOptionSettings,
  GenericListSettings,
} from "./_generic_list.ts";
import { GenericPrompt } from "./_generic_prompt.ts";

/** Select key options. */
export type SelectKeys = GenericListKeys;

/** Select option options. */
export type SelectOption = GenericListOption;

/** Select option settings. */
export type SelectOptionSettings = GenericListOptionSettings;

/** Select options type. */
export type SelectValueOptions = (string | SelectOption)[];
/** Select option settings type. */
export type SelectValueSettings = SelectOptionSettings[];

/** Select prompt options. */
export interface SelectOptions extends GenericListOptions<string, string> {
  options: SelectValueOptions;
  keys?: SelectKeys;
}

/** Select prompt settings. */
export interface SelectSettings extends GenericListSettings<string, string> {
  options: SelectValueSettings;
  keys?: SelectKeys;
}

/** Select prompt representation. */
export class Select<TSettings extends SelectSettings = SelectSettings>
  extends GenericList<string, string, TSettings> {
  protected listIndex: number = this.getListIndex(this.settings.default);

  /**
   * Inject prompt value. Can be used for unit tests or pre selections.
   * @param value Input value.
   */
  public static inject(value: string): void {
    GenericPrompt.inject(value);
  }

  /** Execute the prompt and show cursor on end. */
  public static prompt(options: SelectOptions): Promise<string> {
    return new this({
      pointer: brightBlue(Figures.POINTER_SMALL),
      prefix: yellow("? "),
      indent: " ",
      listPointer: brightBlue(Figures.POINTER),
      maxRows: 10,
      searchLabel: brightBlue(Figures.SEARCH),
      ...options,
      options: Select.mapOptions(options),
    }).prompt();
  }

  protected static mapOptions(options: SelectOptions): SelectValueSettings {
    return options.options
      .map((item: string | SelectOption) =>
        typeof item === "string" ? { value: item } : item
      )
      .map((item) => this.mapOption(item));
  }

  protected input(): string {
    return underline(brightBlue(this.inputValue));
  }

  /**
   * Render select option.
   * @param item        Select option settings.
   * @param isSelected  Set to true if option is selected.
   */
  protected getListItem(
    item: SelectOptionSettings,
    isSelected?: boolean,
  ): string {
    let line = this.settings.indent;
    line += isSelected ? `${this.settings.listPointer} ` : "  ";
    line += `${
      isSelected && !item.disabled
        ? this.highlight(item.name, (val) => val)
        : this.highlight(item.name)
    }`;
    return line;
  }

  /** Get value of selected option. */
  protected getValue(): string {
    return this.options[this.listIndex]?.value ?? this.settings.default;
  }

  /**
   * Validate input value.
   * @param value User input value.
   * @return True on success, false or error message on error.
   */
  protected validate(value: string): boolean | string {
    return typeof value === "string" &&
      value.length > 0 &&
      this.options.findIndex((option: SelectOptionSettings) =>
          option.value === value
        ) !== -1;
  }

  /**
   * Map input value to output value.
   * @param value Input value.
   * @return Output value.
   */
  protected transform(value: string): string {
    return value.trim();
  }

  /**
   * Format output value.
   * @param value Output value.
   */
  protected format(value: string): string {
    return this.getOptionByValue(value)?.name ?? value;
  }
}

// denoCacheMetadata={"headers":{"vary":"Accept-Encoding, Origin","x-amz-replication-status":"COMPLETED","x-amz-server-side-encryption":"AES256","content-type":"application/typescript; charset=utf-8","date":"Sun, 12 Jan 2025 02:19:10 GMT","content-length":"3689","content-security-policy":"default-src 'none'; style-src 'unsafe-inline'; sandbox","cross-origin-embedder-policy":"same-origin","cache-control":"public, max-age=31536000, immutable","cross-origin-opener-policy":"same-origin","access-control-allow-origin":"*","server-timing":"fetchSource;dur=22","via":"http/2 edgeproxy-h","x-content-type-options":"nosniff","cross-origin-resource-policy":"same-origin","etag":"\"561c97d47c6f63b3bd1afa6b363085fc\"","last-modified":"Thu, 05 Jan 2023 20:39:47 GMT","x-amz-version-id":"XHSg50k8S0m.yaXGe5.ZKRZE6pqlJV2A","x-amz-cf-id":"3BdTrMRr1n2MT45TnsQw7965xyAKjChBnRhyXMeozJrKxQQ1AHAj_A==","age":"204595","x-amz-cf-pop":"IAD12-P5","x-cache":"Hit from cloudfront","strict-transport-security":"max-age=63072000; includeSubDomains; preload","accept-ranges":"bytes","referrer-policy":"strict-origin-when-cross-origin","x-frame-options":"DENY","server":"deno/gcp-us-east4"},"url":"https://deno.land/x/cliffy@v0.25.7/prompt/select.ts","time":1736852944}