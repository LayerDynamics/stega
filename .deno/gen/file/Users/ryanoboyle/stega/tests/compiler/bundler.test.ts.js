// /src/tests/compiler/bundler.test.ts
import { assertEquals } from "https://deno.land/std@0.203.0/testing/asserts.ts";
import { Bundler } from "../../src/compiler/bundler.ts";
import { DependencyGraph } from "../../src/compiler/dependency-graph.ts";
import { ts } from "https://deno.land/x/ts_morph@17.0.1/mod.ts";
import * as pathModule from "https://deno.land/std@0.203.0/path/mod.ts";
/**
 * Mock ModuleInfo for testing.
 */ const mockModule = (path, code, dependencies)=>({
    path,
    code,
    dependencies,
    ast: {}
  });
/**
 * Mock parseModule function for testing.
 */ const mockParseModule = async (modulePath)=>{
  const resolvedPath = pathModule.resolve(modulePath);
  const basePath = pathModule.resolve("/Users/ryanoboyle/stega");
  if (resolvedPath === pathModule.join(basePath, "a.ts")) {
    return mockModule(resolvedPath, "export const a = 'a';", []);
  } else if (resolvedPath === pathModule.join(basePath, "b.ts")) {
    const dependencyPath = pathModule.join(basePath, "a.ts");
    return mockModule(resolvedPath, "import { a } from './a.ts'; export const b = a + 'b';", [
      dependencyPath
    ]);
  } else {
    throw new Error(`Unknown module path: ${modulePath}`);
  }
};
Deno.test("Bundler - bundles modules correctly", async ()=>{
  const graph = new DependencyGraph();
  const entryModule = mockModule(pathModule.join("/Users/ryanoboyle/stega", "b.ts"), "import { a } from './a.ts'; export const b = a + 'b';", [
    pathModule.join("/Users/ryanoboyle/stega", "a.ts")
  ]);
  await graph.build(entryModule, {
    parseModule: mockParseModule
  });
  const bundler = new Bundler({
    entryPoint: pathModule.join("/Users/ryanoboyle/stega", "b.ts"),
    outDir: "dist",
    sourceMaps: false,
    minify: false,
    target: ts.ScriptTarget.ES2020,
    plugins: [],
    module: ts.ModuleKind.ES2015,
    platform: "browser",
    externals: [],
    define: {},
    experimentalDecorators: false,
    treeshake: true,
    format: "es6"
  });
  const result = bundler.bundle(graph);
  assertEquals(typeof result.code, "string", "Bundled code should be a string");
  assertEquals(result.modules.size, 2, "Should contain two modules");
  // Check if bundled code includes both modules' code
  assertEquals(result.code.includes("export const a = 'a';"), true, "Bundled code should include module 'a.ts'");
  assertEquals(result.code.includes("export const b = a + 'b';"), true, "Bundled code should include module 'b.ts'");
  // Optionally, check if the preamble and postamble are present
  assertEquals(result.code.includes("__register"), true, "Bundled code should include __register function");
  assertEquals(result.code.includes("__require"), true, "Bundled code should include __require function");
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvcnlhbm9ib3lsZS9zdGVnYS90ZXN0cy9jb21waWxlci9idW5kbGVyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gL3NyYy90ZXN0cy9jb21waWxlci9idW5kbGVyLnRlc3QudHNcbmltcG9ydCB7IGFzc2VydEVxdWFscyB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4yMDMuMC90ZXN0aW5nL2Fzc2VydHMudHNcIjtcbmltcG9ydCB7IEJ1bmRsZXIgfSBmcm9tIFwiLi4vLi4vc3JjL2NvbXBpbGVyL2J1bmRsZXIudHNcIjtcbmltcG9ydCB7IERlcGVuZGVuY3lHcmFwaCB9IGZyb20gXCIuLi8uLi9zcmMvY29tcGlsZXIvZGVwZW5kZW5jeS1ncmFwaC50c1wiO1xuaW1wb3J0IHR5cGUgeyBNb2R1bGVJbmZvIH0gZnJvbSBcIi4uLy4uL3NyYy9jb21waWxlci90eXBlcy50c1wiO1xuaW1wb3J0IHsgUHJvamVjdCwgdHMgfSBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQveC90c19tb3JwaEAxNy4wLjEvbW9kLnRzXCI7XG5pbXBvcnQgKiBhcyBwYXRoTW9kdWxlIGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4yMDMuMC9wYXRoL21vZC50c1wiO1xuXG4vKipcbiAqIE1vY2sgTW9kdWxlSW5mbyBmb3IgdGVzdGluZy5cbiAqL1xuY29uc3QgbW9ja01vZHVsZSA9IChcblx0cGF0aDogc3RyaW5nLFxuXHRjb2RlOiBzdHJpbmcsXG5cdGRlcGVuZGVuY2llczogc3RyaW5nW10sXG4pOiBNb2R1bGVJbmZvID0+ICh7XG5cdHBhdGgsXG5cdGNvZGUsXG5cdGRlcGVuZGVuY2llcyxcblx0YXN0OiB7fSBhcyB1bmtub3duLCAvLyBSZXBsYWNlIHdpdGggYWN0dWFsIEFTVCBpZiBuZWNlc3Nhcnlcbn0pO1xuXG4vKipcbiAqIE1vY2sgcGFyc2VNb2R1bGUgZnVuY3Rpb24gZm9yIHRlc3RpbmcuXG4gKi9cbmNvbnN0IG1vY2tQYXJzZU1vZHVsZSA9IGFzeW5jIChtb2R1bGVQYXRoOiBzdHJpbmcpOiBQcm9taXNlPE1vZHVsZUluZm8+ID0+IHtcblx0Y29uc3QgcmVzb2x2ZWRQYXRoID0gcGF0aE1vZHVsZS5yZXNvbHZlKG1vZHVsZVBhdGgpO1xuXHRjb25zdCBiYXNlUGF0aCA9IHBhdGhNb2R1bGUucmVzb2x2ZShcIi9Vc2Vycy9yeWFub2JveWxlL3N0ZWdhXCIpO1xuXG5cdGlmIChyZXNvbHZlZFBhdGggPT09IHBhdGhNb2R1bGUuam9pbihiYXNlUGF0aCwgXCJhLnRzXCIpKSB7XG5cdFx0cmV0dXJuIG1vY2tNb2R1bGUoXG5cdFx0XHRyZXNvbHZlZFBhdGgsXG5cdFx0XHRcImV4cG9ydCBjb25zdCBhID0gJ2EnO1wiLFxuXHRcdFx0W10sIC8vIE5vIGRlcGVuZGVuY2llc1xuXHRcdCk7XG5cdH0gZWxzZSBpZiAocmVzb2x2ZWRQYXRoID09PSBwYXRoTW9kdWxlLmpvaW4oYmFzZVBhdGgsIFwiYi50c1wiKSkge1xuXHRcdGNvbnN0IGRlcGVuZGVuY3lQYXRoID0gcGF0aE1vZHVsZS5qb2luKGJhc2VQYXRoLCBcImEudHNcIik7XG5cdFx0cmV0dXJuIG1vY2tNb2R1bGUoXG5cdFx0XHRyZXNvbHZlZFBhdGgsXG5cdFx0XHRcImltcG9ydCB7IGEgfSBmcm9tICcuL2EudHMnOyBleHBvcnQgY29uc3QgYiA9IGEgKyAnYic7XCIsXG5cdFx0XHRbZGVwZW5kZW5jeVBhdGhdLCAvLyBEZXBlbmRzIG9uIGEudHNcblx0XHQpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtb2R1bGUgcGF0aDogJHttb2R1bGVQYXRofWApO1xuXHR9XG59O1xuXG5EZW5vLnRlc3QoXCJCdW5kbGVyIC0gYnVuZGxlcyBtb2R1bGVzIGNvcnJlY3RseVwiLCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IGdyYXBoID0gbmV3IERlcGVuZGVuY3lHcmFwaCgpO1xuXG5cdGNvbnN0IGVudHJ5TW9kdWxlID0gbW9ja01vZHVsZShcblx0XHRwYXRoTW9kdWxlLmpvaW4oXCIvVXNlcnMvcnlhbm9ib3lsZS9zdGVnYVwiLCBcImIudHNcIiksXG5cdFx0XCJpbXBvcnQgeyBhIH0gZnJvbSAnLi9hLnRzJzsgZXhwb3J0IGNvbnN0IGIgPSBhICsgJ2InO1wiLFxuXHRcdFtwYXRoTW9kdWxlLmpvaW4oXCIvVXNlcnMvcnlhbm9ib3lsZS9zdGVnYVwiLCBcImEudHNcIildLFxuXHQpO1xuXG5cdGF3YWl0IGdyYXBoLmJ1aWxkKGVudHJ5TW9kdWxlLCB7IHBhcnNlTW9kdWxlOiBtb2NrUGFyc2VNb2R1bGUgfSk7XG5cblx0Y29uc3QgYnVuZGxlciA9IG5ldyBCdW5kbGVyKHtcblx0XHRlbnRyeVBvaW50OiBwYXRoTW9kdWxlLmpvaW4oXCIvVXNlcnMvcnlhbm9ib3lsZS9zdGVnYVwiLCBcImIudHNcIiksXG5cdFx0b3V0RGlyOiBcImRpc3RcIixcblx0XHRzb3VyY2VNYXBzOiBmYWxzZSxcblx0XHRtaW5pZnk6IGZhbHNlLFxuXHRcdHRhcmdldDogdHMuU2NyaXB0VGFyZ2V0LkVTMjAyMCxcblx0XHRwbHVnaW5zOiBbXSxcblx0XHRtb2R1bGU6IHRzLk1vZHVsZUtpbmQuRVMyMDE1LFxuXHRcdHBsYXRmb3JtOiBcImJyb3dzZXJcIixcblx0XHRleHRlcm5hbHM6IFtdLFxuXHRcdGRlZmluZToge30sXG5cdFx0ZXhwZXJpbWVudGFsRGVjb3JhdG9yczogZmFsc2UsXG5cdFx0dHJlZXNoYWtlOiB0cnVlLFxuXHRcdGZvcm1hdDogXCJlczZcIixcblx0fSk7XG5cblx0Y29uc3QgcmVzdWx0ID0gYnVuZGxlci5idW5kbGUoZ3JhcGgpO1xuXG5cdGFzc2VydEVxdWFscyh0eXBlb2YgcmVzdWx0LmNvZGUsIFwic3RyaW5nXCIsIFwiQnVuZGxlZCBjb2RlIHNob3VsZCBiZSBhIHN0cmluZ1wiKTtcblx0YXNzZXJ0RXF1YWxzKHJlc3VsdC5tb2R1bGVzLnNpemUsIDIsIFwiU2hvdWxkIGNvbnRhaW4gdHdvIG1vZHVsZXNcIik7XG5cblx0Ly8gQ2hlY2sgaWYgYnVuZGxlZCBjb2RlIGluY2x1ZGVzIGJvdGggbW9kdWxlcycgY29kZVxuXHRhc3NlcnRFcXVhbHMoXG5cdFx0cmVzdWx0LmNvZGUuaW5jbHVkZXMoXCJleHBvcnQgY29uc3QgYSA9ICdhJztcIiksXG5cdFx0dHJ1ZSxcblx0XHRcIkJ1bmRsZWQgY29kZSBzaG91bGQgaW5jbHVkZSBtb2R1bGUgJ2EudHMnXCIsXG5cdCk7XG5cdGFzc2VydEVxdWFscyhcblx0XHRyZXN1bHQuY29kZS5pbmNsdWRlcyhcImV4cG9ydCBjb25zdCBiID0gYSArICdiJztcIiksXG5cdFx0dHJ1ZSxcblx0XHRcIkJ1bmRsZWQgY29kZSBzaG91bGQgaW5jbHVkZSBtb2R1bGUgJ2IudHMnXCIsXG5cdCk7XG5cblx0Ly8gT3B0aW9uYWxseSwgY2hlY2sgaWYgdGhlIHByZWFtYmxlIGFuZCBwb3N0YW1ibGUgYXJlIHByZXNlbnRcblx0YXNzZXJ0RXF1YWxzKFxuXHRcdHJlc3VsdC5jb2RlLmluY2x1ZGVzKFwiX19yZWdpc3RlclwiKSxcblx0XHR0cnVlLFxuXHRcdFwiQnVuZGxlZCBjb2RlIHNob3VsZCBpbmNsdWRlIF9fcmVnaXN0ZXIgZnVuY3Rpb25cIixcblx0KTtcblx0YXNzZXJ0RXF1YWxzKFxuXHRcdHJlc3VsdC5jb2RlLmluY2x1ZGVzKFwiX19yZXF1aXJlXCIpLFxuXHRcdHRydWUsXG5cdFx0XCJCdW5kbGVkIGNvZGUgc2hvdWxkIGluY2x1ZGUgX19yZXF1aXJlIGZ1bmN0aW9uXCIsXG5cdCk7XG59KTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFDdEMsU0FBUyxZQUFZLFFBQVEsbURBQW1EO0FBQ2hGLFNBQVMsT0FBTyxRQUFRLGdDQUFnQztBQUN4RCxTQUFTLGVBQWUsUUFBUSx5Q0FBeUM7QUFFekUsU0FBa0IsRUFBRSxRQUFRLDZDQUE2QztBQUN6RSxZQUFZLGdCQUFnQiw0Q0FBNEM7QUFFeEU7O0NBRUMsR0FDRCxNQUFNLGFBQWEsQ0FDbEIsTUFDQSxNQUNBLGVBQ2dCLENBQUM7SUFDakI7SUFDQTtJQUNBO0lBQ0EsS0FBSyxDQUFDO0VBQ1AsQ0FBQztBQUVEOztDQUVDLEdBQ0QsTUFBTSxrQkFBa0IsT0FBTztFQUM5QixNQUFNLGVBQWUsV0FBVyxPQUFPLENBQUM7RUFDeEMsTUFBTSxXQUFXLFdBQVcsT0FBTyxDQUFDO0VBRXBDLElBQUksaUJBQWlCLFdBQVcsSUFBSSxDQUFDLFVBQVUsU0FBUztJQUN2RCxPQUFPLFdBQ04sY0FDQSx5QkFDQSxFQUFFO0VBRUosT0FBTyxJQUFJLGlCQUFpQixXQUFXLElBQUksQ0FBQyxVQUFVLFNBQVM7SUFDOUQsTUFBTSxpQkFBaUIsV0FBVyxJQUFJLENBQUMsVUFBVTtJQUNqRCxPQUFPLFdBQ04sY0FDQSx5REFDQTtNQUFDO0tBQWU7RUFFbEIsT0FBTztJQUNOLE1BQU0sSUFBSSxNQUFNLENBQUMscUJBQXFCLEVBQUUsV0FBVyxDQUFDO0VBQ3JEO0FBQ0Q7QUFFQSxLQUFLLElBQUksQ0FBQyx1Q0FBdUM7RUFDaEQsTUFBTSxRQUFRLElBQUk7RUFFbEIsTUFBTSxjQUFjLFdBQ25CLFdBQVcsSUFBSSxDQUFDLDJCQUEyQixTQUMzQyx5REFDQTtJQUFDLFdBQVcsSUFBSSxDQUFDLDJCQUEyQjtHQUFRO0VBR3JELE1BQU0sTUFBTSxLQUFLLENBQUMsYUFBYTtJQUFFLGFBQWE7RUFBZ0I7RUFFOUQsTUFBTSxVQUFVLElBQUksUUFBUTtJQUMzQixZQUFZLFdBQVcsSUFBSSxDQUFDLDJCQUEyQjtJQUN2RCxRQUFRO0lBQ1IsWUFBWTtJQUNaLFFBQVE7SUFDUixRQUFRLEdBQUcsWUFBWSxDQUFDLE1BQU07SUFDOUIsU0FBUyxFQUFFO0lBQ1gsUUFBUSxHQUFHLFVBQVUsQ0FBQyxNQUFNO0lBQzVCLFVBQVU7SUFDVixXQUFXLEVBQUU7SUFDYixRQUFRLENBQUM7SUFDVCx3QkFBd0I7SUFDeEIsV0FBVztJQUNYLFFBQVE7RUFDVDtFQUVBLE1BQU0sU0FBUyxRQUFRLE1BQU0sQ0FBQztFQUU5QixhQUFhLE9BQU8sT0FBTyxJQUFJLEVBQUUsVUFBVTtFQUMzQyxhQUFhLE9BQU8sT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHO0VBRXJDLG9EQUFvRDtFQUNwRCxhQUNDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQywwQkFDckIsTUFDQTtFQUVELGFBQ0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLDhCQUNyQixNQUNBO0VBR0QsOERBQThEO0VBQzlELGFBQ0MsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQ3JCLE1BQ0E7RUFFRCxhQUNDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUNyQixNQUNBO0FBRUYifQ==
// denoCacheMetadata=14973332038227793454,8207441673311094505