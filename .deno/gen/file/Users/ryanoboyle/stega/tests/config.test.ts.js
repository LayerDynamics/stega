// tests/config.test.ts
import { ConfigLoader } from "../src/config.ts";
import { assertEquals, assertRejects } from "@std/assert";
const TEST_CONFIG = {
  "test": "value",
  "number": 123,
  "boolean": true
};
async function createTestConfig(content) {
  const path = await Deno.makeTempFile({
    suffix: ".json"
  });
  await Deno.writeTextFile(path, JSON.stringify(content));
  return path;
}
Deno.test("Config - loads configuration file", async ()=>{
  const configPath = await createTestConfig(TEST_CONFIG);
  try {
    const loader = new ConfigLoader(configPath);
    const config = await loader.load();
    assertEquals(config.test, "value");
    assertEquals(config.number, 123);
    assertEquals(config.boolean, true);
  } finally{
    await Deno.remove(configPath);
  }
});
Deno.test("Config - handles missing config file", async ()=>{
  const loader = new ConfigLoader("/non/existent/path.json");
  const config = await loader.load();
  assertEquals(config, {});
});
Deno.test("Config - handles malformed JSON", async ()=>{
  const configPath = await Deno.makeTempFile();
  try {
    await Deno.writeTextFile(configPath, "invalid json");
    const loader = new ConfigLoader(configPath);
    await assertRejects(()=>loader.load(), SyntaxError);
  } finally{
    await Deno.remove(configPath);
  }
});
Deno.test("Config - environment variables override config", async ()=>{
  const configPath = await createTestConfig({
    "test": "original"
  });
  try {
    Deno.env.set("TEST", "overridden");
    const loader = new ConfigLoader(configPath);
    const config = await loader.load();
    assertEquals(config.test, "overridden");
  } finally{
    Deno.env.delete("TEST");
    await Deno.remove(configPath);
  }
});
Deno.test("Config - get method returns correct values", async ()=>{
  const configPath = await createTestConfig(TEST_CONFIG);
  try {
    const loader = new ConfigLoader(configPath);
    await loader.load();
    assertEquals(loader.get("test"), "value");
    assertEquals(loader.get("number"), 123);
    assertEquals(loader.get("boolean"), true);
    assertEquals(loader.get("nonexistent"), undefined);
  } finally{
    await Deno.remove(configPath);
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvcnlhbm9ib3lsZS9zdGVnYS90ZXN0cy9jb25maWcudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0ZXN0cy9jb25maWcudGVzdC50c1xuaW1wb3J0IHsgQ29uZmlnTG9hZGVyIH0gZnJvbSBcIi4uL3NyYy9jb25maWcudHNcIjtcblxuaW1wb3J0IHsgYXNzZXJ0RXF1YWxzLCBhc3NlcnRSZWplY3RzIH0gZnJvbSBcIkBzdGQvYXNzZXJ0XCI7XG5cbmNvbnN0IFRFU1RfQ09ORklHID0ge1xuXHRcInRlc3RcIjogXCJ2YWx1ZVwiLFxuXHRcIm51bWJlclwiOiAxMjMsXG5cdFwiYm9vbGVhblwiOiB0cnVlLFxufTtcblxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVGVzdENvbmZpZyhjb250ZW50OiB1bmtub3duKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0Y29uc3QgcGF0aCA9IGF3YWl0IERlbm8ubWFrZVRlbXBGaWxlKHsgc3VmZml4OiBcIi5qc29uXCIgfSk7XG5cdGF3YWl0IERlbm8ud3JpdGVUZXh0RmlsZShwYXRoLCBKU09OLnN0cmluZ2lmeShjb250ZW50KSk7XG5cdHJldHVybiBwYXRoO1xufVxuXG5EZW5vLnRlc3QoXCJDb25maWcgLSBsb2FkcyBjb25maWd1cmF0aW9uIGZpbGVcIiwgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBjb25maWdQYXRoID0gYXdhaXQgY3JlYXRlVGVzdENvbmZpZyhURVNUX0NPTkZJRyk7XG5cdHRyeSB7XG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IENvbmZpZ0xvYWRlcihjb25maWdQYXRoKTtcblx0XHRjb25zdCBjb25maWcgPSBhd2FpdCBsb2FkZXIubG9hZCgpO1xuXHRcdGFzc2VydEVxdWFscyhjb25maWcudGVzdCwgXCJ2YWx1ZVwiKTtcblx0XHRhc3NlcnRFcXVhbHMoY29uZmlnLm51bWJlciwgMTIzKTtcblx0XHRhc3NlcnRFcXVhbHMoY29uZmlnLmJvb2xlYW4sIHRydWUpO1xuXHR9IGZpbmFsbHkge1xuXHRcdGF3YWl0IERlbm8ucmVtb3ZlKGNvbmZpZ1BhdGgpO1xuXHR9XG59KTtcblxuRGVuby50ZXN0KFwiQ29uZmlnIC0gaGFuZGxlcyBtaXNzaW5nIGNvbmZpZyBmaWxlXCIsIGFzeW5jICgpID0+IHtcblx0Y29uc3QgbG9hZGVyID0gbmV3IENvbmZpZ0xvYWRlcihcIi9ub24vZXhpc3RlbnQvcGF0aC5qc29uXCIpO1xuXHRjb25zdCBjb25maWcgPSBhd2FpdCBsb2FkZXIubG9hZCgpO1xuXHRhc3NlcnRFcXVhbHMoY29uZmlnLCB7fSk7XG59KTtcblxuRGVuby50ZXN0KFwiQ29uZmlnIC0gaGFuZGxlcyBtYWxmb3JtZWQgSlNPTlwiLCBhc3luYyAoKSA9PiB7XG5cdGNvbnN0IGNvbmZpZ1BhdGggPSBhd2FpdCBEZW5vLm1ha2VUZW1wRmlsZSgpO1xuXHR0cnkge1xuXHRcdGF3YWl0IERlbm8ud3JpdGVUZXh0RmlsZShjb25maWdQYXRoLCBcImludmFsaWQganNvblwiKTtcblx0XHRjb25zdCBsb2FkZXIgPSBuZXcgQ29uZmlnTG9hZGVyKGNvbmZpZ1BhdGgpO1xuXHRcdGF3YWl0IGFzc2VydFJlamVjdHMoXG5cdFx0XHQoKSA9PiBsb2FkZXIubG9hZCgpLFxuXHRcdFx0U3ludGF4RXJyb3IsXG5cdFx0KTtcblx0fSBmaW5hbGx5IHtcblx0XHRhd2FpdCBEZW5vLnJlbW92ZShjb25maWdQYXRoKTtcblx0fVxufSk7XG5cbkRlbm8udGVzdChcIkNvbmZpZyAtIGVudmlyb25tZW50IHZhcmlhYmxlcyBvdmVycmlkZSBjb25maWdcIiwgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBjb25maWdQYXRoID0gYXdhaXQgY3JlYXRlVGVzdENvbmZpZyh7IFwidGVzdFwiOiBcIm9yaWdpbmFsXCIgfSk7XG5cdHRyeSB7XG5cdFx0RGVuby5lbnYuc2V0KFwiVEVTVFwiLCBcIm92ZXJyaWRkZW5cIik7XG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IENvbmZpZ0xvYWRlcihjb25maWdQYXRoKTtcblx0XHRjb25zdCBjb25maWcgPSBhd2FpdCBsb2FkZXIubG9hZCgpO1xuXHRcdGFzc2VydEVxdWFscyhjb25maWcudGVzdCwgXCJvdmVycmlkZGVuXCIpO1xuXHR9IGZpbmFsbHkge1xuXHRcdERlbm8uZW52LmRlbGV0ZShcIlRFU1RcIik7XG5cdFx0YXdhaXQgRGVuby5yZW1vdmUoY29uZmlnUGF0aCk7XG5cdH1cbn0pO1xuXG5EZW5vLnRlc3QoXCJDb25maWcgLSBnZXQgbWV0aG9kIHJldHVybnMgY29ycmVjdCB2YWx1ZXNcIiwgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBjb25maWdQYXRoID0gYXdhaXQgY3JlYXRlVGVzdENvbmZpZyhURVNUX0NPTkZJRyk7XG5cdHRyeSB7XG5cdFx0Y29uc3QgbG9hZGVyID0gbmV3IENvbmZpZ0xvYWRlcihjb25maWdQYXRoKTtcblx0XHRhd2FpdCBsb2FkZXIubG9hZCgpO1xuXHRcdGFzc2VydEVxdWFscyhsb2FkZXIuZ2V0KFwidGVzdFwiKSwgXCJ2YWx1ZVwiKTtcblx0XHRhc3NlcnRFcXVhbHMobG9hZGVyLmdldChcIm51bWJlclwiKSwgMTIzKTtcblx0XHRhc3NlcnRFcXVhbHMobG9hZGVyLmdldChcImJvb2xlYW5cIiksIHRydWUpO1xuXHRcdGFzc2VydEVxdWFscyhsb2FkZXIuZ2V0KFwibm9uZXhpc3RlbnRcIiksIHVuZGVmaW5lZCk7XG5cdH0gZmluYWxseSB7XG5cdFx0YXdhaXQgRGVuby5yZW1vdmUoY29uZmlnUGF0aCk7XG5cdH1cbn0pO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVCQUF1QjtBQUN2QixTQUFTLFlBQVksUUFBUSxtQkFBbUI7QUFFaEQsU0FBUyxZQUFZLEVBQUUsYUFBYSxRQUFRLGNBQWM7QUFFMUQsTUFBTSxjQUFjO0VBQ25CLFFBQVE7RUFDUixVQUFVO0VBQ1YsV0FBVztBQUNaO0FBRUEsZUFBZSxpQkFBaUIsT0FBZ0I7RUFDL0MsTUFBTSxPQUFPLE1BQU0sS0FBSyxZQUFZLENBQUM7SUFBRSxRQUFRO0VBQVE7RUFDdkQsTUFBTSxLQUFLLGFBQWEsQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDO0VBQzlDLE9BQU87QUFDUjtBQUVBLEtBQUssSUFBSSxDQUFDLHFDQUFxQztFQUM5QyxNQUFNLGFBQWEsTUFBTSxpQkFBaUI7RUFDMUMsSUFBSTtJQUNILE1BQU0sU0FBUyxJQUFJLGFBQWE7SUFDaEMsTUFBTSxTQUFTLE1BQU0sT0FBTyxJQUFJO0lBQ2hDLGFBQWEsT0FBTyxJQUFJLEVBQUU7SUFDMUIsYUFBYSxPQUFPLE1BQU0sRUFBRTtJQUM1QixhQUFhLE9BQU8sT0FBTyxFQUFFO0VBQzlCLFNBQVU7SUFDVCxNQUFNLEtBQUssTUFBTSxDQUFDO0VBQ25CO0FBQ0Q7QUFFQSxLQUFLLElBQUksQ0FBQyx3Q0FBd0M7RUFDakQsTUFBTSxTQUFTLElBQUksYUFBYTtFQUNoQyxNQUFNLFNBQVMsTUFBTSxPQUFPLElBQUk7RUFDaEMsYUFBYSxRQUFRLENBQUM7QUFDdkI7QUFFQSxLQUFLLElBQUksQ0FBQyxtQ0FBbUM7RUFDNUMsTUFBTSxhQUFhLE1BQU0sS0FBSyxZQUFZO0VBQzFDLElBQUk7SUFDSCxNQUFNLEtBQUssYUFBYSxDQUFDLFlBQVk7SUFDckMsTUFBTSxTQUFTLElBQUksYUFBYTtJQUNoQyxNQUFNLGNBQ0wsSUFBTSxPQUFPLElBQUksSUFDakI7RUFFRixTQUFVO0lBQ1QsTUFBTSxLQUFLLE1BQU0sQ0FBQztFQUNuQjtBQUNEO0FBRUEsS0FBSyxJQUFJLENBQUMsa0RBQWtEO0VBQzNELE1BQU0sYUFBYSxNQUFNLGlCQUFpQjtJQUFFLFFBQVE7RUFBVztFQUMvRCxJQUFJO0lBQ0gsS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVE7SUFDckIsTUFBTSxTQUFTLElBQUksYUFBYTtJQUNoQyxNQUFNLFNBQVMsTUFBTSxPQUFPLElBQUk7SUFDaEMsYUFBYSxPQUFPLElBQUksRUFBRTtFQUMzQixTQUFVO0lBQ1QsS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ2hCLE1BQU0sS0FBSyxNQUFNLENBQUM7RUFDbkI7QUFDRDtBQUVBLEtBQUssSUFBSSxDQUFDLDhDQUE4QztFQUN2RCxNQUFNLGFBQWEsTUFBTSxpQkFBaUI7RUFDMUMsSUFBSTtJQUNILE1BQU0sU0FBUyxJQUFJLGFBQWE7SUFDaEMsTUFBTSxPQUFPLElBQUk7SUFDakIsYUFBYSxPQUFPLEdBQUcsQ0FBQyxTQUFTO0lBQ2pDLGFBQWEsT0FBTyxHQUFHLENBQUMsV0FBVztJQUNuQyxhQUFhLE9BQU8sR0FBRyxDQUFDLFlBQVk7SUFDcEMsYUFBYSxPQUFPLEdBQUcsQ0FBQyxnQkFBZ0I7RUFDekMsU0FBVTtJQUNULE1BQU0sS0FBSyxNQUFNLENBQUM7RUFDbkI7QUFDRCJ9
// denoCacheMetadata=3906729033183607654,1391729635777826586