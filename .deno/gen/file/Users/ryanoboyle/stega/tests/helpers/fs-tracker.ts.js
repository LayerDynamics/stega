// tests/helpers/fs-tracker.ts
import { logger } from "../../src/logger.ts";
import * as path from "https://deno.land/std@0.224.0/path/mod.ts";
import { SEPARATOR } from "https://deno.land/std@0.224.0/path/separator.ts";
export class FileSystemTracker {
  static operations = new Map();
  static originalRmSync = Deno.removeSync;
  static originalRm = Deno.remove;
  // List of protected directories
  static protectedDirs = [
    path.resolve("src"),
    path.resolve("/src")
  ];
  static init() {
    // Track synchronous removals
    Deno.removeSync = function(pathToRemove, options) {
      const resolvedPath = path.resolve(pathToRemove.toString());
      FileSystemTracker.logOperation("removeSync", resolvedPath);
      if (FileSystemTracker.isProtectedPath(resolvedPath)) {
        logger.warn(`Attempted to remove protected directory or file: ${resolvedPath}`);
        throw new Error(`Protected directory removal attempted: ${resolvedPath}`);
      }
      return FileSystemTracker.originalRmSync.call(Deno, pathToRemove, options);
    };
    // Track asynchronous removals
    Deno.remove = function(pathToRemove, options) {
      const resolvedPath = path.resolve(pathToRemove.toString());
      FileSystemTracker.logOperation("remove", resolvedPath);
      if (FileSystemTracker.isProtectedPath(resolvedPath)) {
        logger.warn(`Attempted to remove protected directory or file: ${resolvedPath}`);
        return Promise.reject(new Error(`Protected directory removal attempted: ${resolvedPath}`));
      }
      return FileSystemTracker.originalRm.call(Deno, pathToRemove, options);
    };
  }
  static reset() {
    // Restore original functions
    Deno.removeSync = FileSystemTracker.originalRmSync;
    Deno.remove = FileSystemTracker.originalRm;
    FileSystemTracker.operations.clear();
  }
  static logOperation(operation, path) {
    const ops = FileSystemTracker.operations.get(operation) || [];
    ops.push(path);
    FileSystemTracker.operations.set(operation, ops);
  }
  static getOperations() {
    return Object.fromEntries(FileSystemTracker.operations);
  }
  static printOperations() {
    console.log("\nFile System Operations:");
    for (const [op, paths] of FileSystemTracker.operations){
      console.log(`\n${op}:`);
      paths.forEach((path)=>console.log(`  - ${path}`));
    }
  }
  static isProtectedPath(resolvedPath) {
    return FileSystemTracker.protectedDirs.some((protectedPath)=>{
      return resolvedPath === protectedPath || resolvedPath.startsWith(protectedPath + SEPARATOR);
    });
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvcnlhbm9ib3lsZS9zdGVnYS90ZXN0cy9oZWxwZXJzL2ZzLXRyYWNrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdGVzdHMvaGVscGVycy9mcy10cmFja2VyLnRzXG5cbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gXCIuLi8uLi9zcmMvbG9nZ2VyLnRzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAMC4yMjQuMC9wYXRoL21vZC50c1wiO1xuaW1wb3J0IHsgU0VQQVJBVE9SIH0gZnJvbSBcImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjIyNC4wL3BhdGgvc2VwYXJhdG9yLnRzXCI7XG5cbmV4cG9ydCBjbGFzcyBGaWxlU3lzdGVtVHJhY2tlciB7XG5cdHByaXZhdGUgc3RhdGljIG9wZXJhdGlvbnM6IE1hcDxzdHJpbmcsIHN0cmluZ1tdPiA9IG5ldyBNYXAoKTtcblx0cHJpdmF0ZSBzdGF0aWMgb3JpZ2luYWxSbVN5bmMgPSBEZW5vLnJlbW92ZVN5bmM7XG5cdHByaXZhdGUgc3RhdGljIG9yaWdpbmFsUm0gPSBEZW5vLnJlbW92ZTtcblxuXHQvLyBMaXN0IG9mIHByb3RlY3RlZCBkaXJlY3Rvcmllc1xuXHRwcml2YXRlIHN0YXRpYyBwcm90ZWN0ZWREaXJzOiBzdHJpbmdbXSA9IFtcblx0XHRwYXRoLnJlc29sdmUoXCJzcmNcIiksXG5cdFx0cGF0aC5yZXNvbHZlKFwiL3NyY1wiKSxcblx0XHQvLyBBZGQgb3RoZXIgZGlyZWN0b3JpZXMgeW91IHdhbnQgdG8gcHJvdGVjdFxuXHRdO1xuXG5cdHN0YXRpYyBpbml0KCkge1xuXHRcdC8vIFRyYWNrIHN5bmNocm9ub3VzIHJlbW92YWxzXG5cdFx0RGVuby5yZW1vdmVTeW5jID0gZnVuY3Rpb24gKFxuXHRcdFx0cGF0aFRvUmVtb3ZlOiBzdHJpbmcgfCBVUkwsXG5cdFx0XHRvcHRpb25zPzogRGVuby5SZW1vdmVPcHRpb25zLFxuXHRcdCkge1xuXHRcdFx0Y29uc3QgcmVzb2x2ZWRQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGhUb1JlbW92ZS50b1N0cmluZygpKTtcblx0XHRcdEZpbGVTeXN0ZW1UcmFja2VyLmxvZ09wZXJhdGlvbihcInJlbW92ZVN5bmNcIiwgcmVzb2x2ZWRQYXRoKTtcblxuXHRcdFx0aWYgKEZpbGVTeXN0ZW1UcmFja2VyLmlzUHJvdGVjdGVkUGF0aChyZXNvbHZlZFBhdGgpKSB7XG5cdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdGBBdHRlbXB0ZWQgdG8gcmVtb3ZlIHByb3RlY3RlZCBkaXJlY3Rvcnkgb3IgZmlsZTogJHtyZXNvbHZlZFBhdGh9YCxcblx0XHRcdFx0KTtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHRcdGBQcm90ZWN0ZWQgZGlyZWN0b3J5IHJlbW92YWwgYXR0ZW1wdGVkOiAke3Jlc29sdmVkUGF0aH1gLFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gRmlsZVN5c3RlbVRyYWNrZXIub3JpZ2luYWxSbVN5bmMuY2FsbChEZW5vLCBwYXRoVG9SZW1vdmUsIG9wdGlvbnMpO1xuXHRcdH07XG5cblx0XHQvLyBUcmFjayBhc3luY2hyb25vdXMgcmVtb3ZhbHNcblx0XHREZW5vLnJlbW92ZSA9IGZ1bmN0aW9uIChcblx0XHRcdHBhdGhUb1JlbW92ZTogc3RyaW5nIHwgVVJMLFxuXHRcdFx0b3B0aW9ucz86IERlbm8uUmVtb3ZlT3B0aW9ucyxcblx0XHQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRcdGNvbnN0IHJlc29sdmVkUGF0aCA9IHBhdGgucmVzb2x2ZShwYXRoVG9SZW1vdmUudG9TdHJpbmcoKSk7XG5cdFx0XHRGaWxlU3lzdGVtVHJhY2tlci5sb2dPcGVyYXRpb24oXCJyZW1vdmVcIiwgcmVzb2x2ZWRQYXRoKTtcblxuXHRcdFx0aWYgKEZpbGVTeXN0ZW1UcmFja2VyLmlzUHJvdGVjdGVkUGF0aChyZXNvbHZlZFBhdGgpKSB7XG5cdFx0XHRcdGxvZ2dlci53YXJuKFxuXHRcdFx0XHRcdGBBdHRlbXB0ZWQgdG8gcmVtb3ZlIHByb3RlY3RlZCBkaXJlY3Rvcnkgb3IgZmlsZTogJHtyZXNvbHZlZFBhdGh9YCxcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFxuXHRcdFx0XHRcdG5ldyBFcnJvcihgUHJvdGVjdGVkIGRpcmVjdG9yeSByZW1vdmFsIGF0dGVtcHRlZDogJHtyZXNvbHZlZFBhdGh9YCksXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBGaWxlU3lzdGVtVHJhY2tlci5vcmlnaW5hbFJtLmNhbGwoRGVubywgcGF0aFRvUmVtb3ZlLCBvcHRpb25zKTtcblx0XHR9O1xuXHR9XG5cblx0c3RhdGljIHJlc2V0KCkge1xuXHRcdC8vIFJlc3RvcmUgb3JpZ2luYWwgZnVuY3Rpb25zXG5cdFx0RGVuby5yZW1vdmVTeW5jID0gRmlsZVN5c3RlbVRyYWNrZXIub3JpZ2luYWxSbVN5bmM7XG5cdFx0RGVuby5yZW1vdmUgPSBGaWxlU3lzdGVtVHJhY2tlci5vcmlnaW5hbFJtO1xuXHRcdEZpbGVTeXN0ZW1UcmFja2VyLm9wZXJhdGlvbnMuY2xlYXIoKTtcblx0fVxuXG5cdHByaXZhdGUgc3RhdGljIGxvZ09wZXJhdGlvbihvcGVyYXRpb246IHN0cmluZywgcGF0aDogc3RyaW5nKSB7XG5cdFx0Y29uc3Qgb3BzID0gRmlsZVN5c3RlbVRyYWNrZXIub3BlcmF0aW9ucy5nZXQob3BlcmF0aW9uKSB8fCBbXTtcblx0XHRvcHMucHVzaChwYXRoKTtcblx0XHRGaWxlU3lzdGVtVHJhY2tlci5vcGVyYXRpb25zLnNldChvcGVyYXRpb24sIG9wcyk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0T3BlcmF0aW9ucygpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4ge1xuXHRcdHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoRmlsZVN5c3RlbVRyYWNrZXIub3BlcmF0aW9ucyk7XG5cdH1cblxuXHRzdGF0aWMgcHJpbnRPcGVyYXRpb25zKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiXFxuRmlsZSBTeXN0ZW0gT3BlcmF0aW9uczpcIik7XG5cdFx0Zm9yIChjb25zdCBbb3AsIHBhdGhzXSBvZiBGaWxlU3lzdGVtVHJhY2tlci5vcGVyYXRpb25zKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgXFxuJHtvcH06YCk7XG5cdFx0XHRwYXRocy5mb3JFYWNoKChwYXRoKSA9PiBjb25zb2xlLmxvZyhgICAtICR7cGF0aH1gKSk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzdGF0aWMgaXNQcm90ZWN0ZWRQYXRoKHJlc29sdmVkUGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIEZpbGVTeXN0ZW1UcmFja2VyLnByb3RlY3RlZERpcnMuc29tZSgocHJvdGVjdGVkUGF0aCkgPT4ge1xuXHRcdFx0cmV0dXJuIHJlc29sdmVkUGF0aCA9PT0gcHJvdGVjdGVkUGF0aCB8fFxuXHRcdFx0XHRyZXNvbHZlZFBhdGguc3RhcnRzV2l0aChwcm90ZWN0ZWRQYXRoICsgU0VQQVJBVE9SKTtcblx0XHR9KTtcblx0fVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUU5QixTQUFTLE1BQU0sUUFBUSxzQkFBc0I7QUFDN0MsWUFBWSxVQUFVLDRDQUE0QztBQUNsRSxTQUFTLFNBQVMsUUFBUSxrREFBa0Q7QUFFNUUsT0FBTyxNQUFNO0VBQ1osT0FBZSxhQUFvQyxJQUFJLE1BQU07RUFDN0QsT0FBZSxpQkFBaUIsS0FBSyxVQUFVLENBQUM7RUFDaEQsT0FBZSxhQUFhLEtBQUssTUFBTSxDQUFDO0VBRXhDLGdDQUFnQztFQUNoQyxPQUFlLGdCQUEwQjtJQUN4QyxLQUFLLE9BQU8sQ0FBQztJQUNiLEtBQUssT0FBTyxDQUFDO0dBRWIsQ0FBQztFQUVGLE9BQU8sT0FBTztJQUNiLDZCQUE2QjtJQUM3QixLQUFLLFVBQVUsR0FBRyxTQUNqQixZQUEwQixFQUMxQixPQUE0QjtNQUU1QixNQUFNLGVBQWUsS0FBSyxPQUFPLENBQUMsYUFBYSxRQUFRO01BQ3ZELGtCQUFrQixZQUFZLENBQUMsY0FBYztNQUU3QyxJQUFJLGtCQUFrQixlQUFlLENBQUMsZUFBZTtRQUNwRCxPQUFPLElBQUksQ0FDVixDQUFDLGlEQUFpRCxFQUFFLGFBQWEsQ0FBQztRQUVuRSxNQUFNLElBQUksTUFDVCxDQUFDLHVDQUF1QyxFQUFFLGFBQWEsQ0FBQztNQUUxRDtNQUVBLE9BQU8sa0JBQWtCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxjQUFjO0lBQ2xFO0lBRUEsOEJBQThCO0lBQzlCLEtBQUssTUFBTSxHQUFHLFNBQ2IsWUFBMEIsRUFDMUIsT0FBNEI7TUFFNUIsTUFBTSxlQUFlLEtBQUssT0FBTyxDQUFDLGFBQWEsUUFBUTtNQUN2RCxrQkFBa0IsWUFBWSxDQUFDLFVBQVU7TUFFekMsSUFBSSxrQkFBa0IsZUFBZSxDQUFDLGVBQWU7UUFDcEQsT0FBTyxJQUFJLENBQ1YsQ0FBQyxpREFBaUQsRUFBRSxhQUFhLENBQUM7UUFFbkUsT0FBTyxRQUFRLE1BQU0sQ0FDcEIsSUFBSSxNQUFNLENBQUMsdUNBQXVDLEVBQUUsYUFBYSxDQUFDO01BRXBFO01BRUEsT0FBTyxrQkFBa0IsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLGNBQWM7SUFDOUQ7RUFDRDtFQUVBLE9BQU8sUUFBUTtJQUNkLDZCQUE2QjtJQUM3QixLQUFLLFVBQVUsR0FBRyxrQkFBa0IsY0FBYztJQUNsRCxLQUFLLE1BQU0sR0FBRyxrQkFBa0IsVUFBVTtJQUMxQyxrQkFBa0IsVUFBVSxDQUFDLEtBQUs7RUFDbkM7RUFFQSxPQUFlLGFBQWEsU0FBaUIsRUFBRSxJQUFZLEVBQUU7SUFDNUQsTUFBTSxNQUFNLGtCQUFrQixVQUFVLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRTtJQUM3RCxJQUFJLElBQUksQ0FBQztJQUNULGtCQUFrQixVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVc7RUFDN0M7RUFFQSxPQUFPLGdCQUEwQztJQUNoRCxPQUFPLE9BQU8sV0FBVyxDQUFDLGtCQUFrQixVQUFVO0VBQ3ZEO0VBRUEsT0FBTyxrQkFBa0I7SUFDeEIsUUFBUSxHQUFHLENBQUM7SUFDWixLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sSUFBSSxrQkFBa0IsVUFBVSxDQUFFO01BQ3ZELFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO01BQ3RCLE1BQU0sT0FBTyxDQUFDLENBQUMsT0FBUyxRQUFRLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7SUFDbEQ7RUFDRDtFQUVBLE9BQWUsZ0JBQWdCLFlBQW9CLEVBQVc7SUFDN0QsT0FBTyxrQkFBa0IsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO01BQzVDLE9BQU8saUJBQWlCLGlCQUN2QixhQUFhLFVBQVUsQ0FBQyxnQkFBZ0I7SUFDMUM7RUFDRDtBQUNEIn0=
// denoCacheMetadata=18118198540737012559,10792710389489806889