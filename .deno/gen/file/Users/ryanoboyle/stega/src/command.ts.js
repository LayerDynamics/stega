// src/command.ts
export class CommandRegistry {
  commands = [];
  /**
	 * Registers a new command.
	 * @param command The command to register.
	 */ register(command) {
    // Check for existing command
    const existing = this.findCommand(command.name);
    if (existing) {
      throw new Error(`Command "${command.name}" is already registered`);
    }
    this.commands.push(command);
  }
  /**
	 * Removes a command by name.
	 * @param name The name of the command to remove.
	 * @returns true if command was removed, false if not found
	 */ remove(name) {
    const index = this.commands.findIndex((cmd)=>cmd.name === name);
    if (index !== -1) {
      this.commands.splice(index, 1);
      return true;
    }
    return false;
  }
  /**
	 * Retrieves all registered commands.
	 * @returns An array of registered commands.
	 */ getCommands() {
    return this.commands;
  }
  /**
	 * Finds a command by name or alias.
	 * @param name The name or alias of the command.
	 * @returns The found command or undefined.
	 */ findCommand(name) {
    return this.commands.find((cmd)=>cmd.name === name || cmd.aliases && cmd.aliases.includes(name));
  }
  /**
	 * Recursively finds a subcommand within a command hierarchy.
	 * @param command The root command to search within.
	 * @param subcommandPath An array representing the path of subcommands.
	 * @returns The found subcommand or undefined.
	 */ findSubcommand(command, subcommandPath) {
    let currentCommand = command;
    for (const subName of subcommandPath){
      if (!currentCommand.subcommands) {
        return undefined;
      }
      const subcommand = currentCommand.subcommands.find((cmd)=>cmd.name === subName || cmd.aliases && cmd.aliases.includes(subName));
      if (!subcommand) {
        return undefined;
      }
      currentCommand = subcommand;
    }
    return currentCommand;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvcnlhbm9ib3lsZS9zdGVnYS9zcmMvY29tbWFuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvY29tbWFuZC50c1xuaW1wb3J0IHsgRmxhZ1ZhbHVlIH0gZnJvbSBcIi4vZmxhZy50c1wiOyAvLyBJbXBvcnQgRmxhZ1ZhbHVlXG5pbXBvcnQgdHlwZSB7IEFyZ3MgfSBmcm9tIFwiLi90eXBlcy50c1wiOyAvLyBJbXBvcnQgQXJncyBmcm9tIHR5cGVzLnRzXG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBvcHRpb24gZm9yIGEgY29tbWFuZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPcHRpb24ge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGFsaWFzPzogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbj86IHN0cmluZztcblx0dHlwZTogXCJib29sZWFuXCIgfCBcInN0cmluZ1wiIHwgXCJudW1iZXJcIiB8IFwiYXJyYXlcIjtcblx0ZGVmYXVsdD86IEZsYWdWYWx1ZTtcblx0cmVxdWlyZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb21tYW5kIGluIHRoZSBDTEkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tbWFuZCB7XG5cdG5hbWU6IHN0cmluZztcblx0ZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cdG9wdGlvbnM/OiBPcHRpb25bXTtcblx0c3ViY29tbWFuZHM/OiBDb21tYW5kW107XG5cdGFjdGlvbjogKGFyZ3M6IEFyZ3MpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+O1xuXHRhbGlhc2VzPzogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kUmVnaXN0cnkge1xuXHRwcml2YXRlIGNvbW1hbmRzOiBDb21tYW5kW10gPSBbXTtcblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIGEgbmV3IGNvbW1hbmQuXG5cdCAqIEBwYXJhbSBjb21tYW5kIFRoZSBjb21tYW5kIHRvIHJlZ2lzdGVyLlxuXHQgKi9cblx0cmVnaXN0ZXIoY29tbWFuZDogQ29tbWFuZCkge1xuXHRcdC8vIENoZWNrIGZvciBleGlzdGluZyBjb21tYW5kXG5cdFx0Y29uc3QgZXhpc3RpbmcgPSB0aGlzLmZpbmRDb21tYW5kKGNvbW1hbmQubmFtZSk7XG5cdFx0aWYgKGV4aXN0aW5nKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYENvbW1hbmQgXCIke2NvbW1hbmQubmFtZX1cIiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWRgKTtcblx0XHR9XG5cdFx0dGhpcy5jb21tYW5kcy5wdXNoKGNvbW1hbmQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYSBjb21tYW5kIGJ5IG5hbWUuXG5cdCAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBjb21tYW5kIHRvIHJlbW92ZS5cblx0ICogQHJldHVybnMgdHJ1ZSBpZiBjb21tYW5kIHdhcyByZW1vdmVkLCBmYWxzZSBpZiBub3QgZm91bmRcblx0ICovXG5cdHJlbW92ZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRjb25zdCBpbmRleCA9IHRoaXMuY29tbWFuZHMuZmluZEluZGV4KChjbWQpID0+IGNtZC5uYW1lID09PSBuYW1lKTtcblx0XHRpZiAoaW5kZXggIT09IC0xKSB7XG5cdFx0XHR0aGlzLmNvbW1hbmRzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHJpZXZlcyBhbGwgcmVnaXN0ZXJlZCBjb21tYW5kcy5cblx0ICogQHJldHVybnMgQW4gYXJyYXkgb2YgcmVnaXN0ZXJlZCBjb21tYW5kcy5cblx0ICovXG5cdGdldENvbW1hbmRzKCk6IENvbW1hbmRbXSB7XG5cdFx0cmV0dXJuIHRoaXMuY29tbWFuZHM7XG5cdH1cblxuXHQvKipcblx0ICogRmluZHMgYSBjb21tYW5kIGJ5IG5hbWUgb3IgYWxpYXMuXG5cdCAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9yIGFsaWFzIG9mIHRoZSBjb21tYW5kLlxuXHQgKiBAcmV0dXJucyBUaGUgZm91bmQgY29tbWFuZCBvciB1bmRlZmluZWQuXG5cdCAqL1xuXHRmaW5kQ29tbWFuZChuYW1lOiBzdHJpbmcpOiBDb21tYW5kIHwgdW5kZWZpbmVkIHtcblx0XHRyZXR1cm4gdGhpcy5jb21tYW5kcy5maW5kKFxuXHRcdFx0KGNtZCkgPT4gY21kLm5hbWUgPT09IG5hbWUgfHwgKGNtZC5hbGlhc2VzICYmIGNtZC5hbGlhc2VzLmluY2x1ZGVzKG5hbWUpKSxcblx0XHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlY3Vyc2l2ZWx5IGZpbmRzIGEgc3ViY29tbWFuZCB3aXRoaW4gYSBjb21tYW5kIGhpZXJhcmNoeS5cblx0ICogQHBhcmFtIGNvbW1hbmQgVGhlIHJvb3QgY29tbWFuZCB0byBzZWFyY2ggd2l0aGluLlxuXHQgKiBAcGFyYW0gc3ViY29tbWFuZFBhdGggQW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwYXRoIG9mIHN1YmNvbW1hbmRzLlxuXHQgKiBAcmV0dXJucyBUaGUgZm91bmQgc3ViY29tbWFuZCBvciB1bmRlZmluZWQuXG5cdCAqL1xuXHRmaW5kU3ViY29tbWFuZChcblx0XHRjb21tYW5kOiBDb21tYW5kLFxuXHRcdHN1YmNvbW1hbmRQYXRoOiBzdHJpbmdbXSxcblx0KTogQ29tbWFuZCB8IHVuZGVmaW5lZCB7XG5cdFx0bGV0IGN1cnJlbnRDb21tYW5kID0gY29tbWFuZDtcblxuXHRcdGZvciAoY29uc3Qgc3ViTmFtZSBvZiBzdWJjb21tYW5kUGF0aCkge1xuXHRcdFx0aWYgKCFjdXJyZW50Q29tbWFuZC5zdWJjb21tYW5kcykge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3Qgc3ViY29tbWFuZCA9IGN1cnJlbnRDb21tYW5kLnN1YmNvbW1hbmRzLmZpbmQoXG5cdFx0XHRcdChjbWQpID0+XG5cdFx0XHRcdFx0Y21kLm5hbWUgPT09IHN1Yk5hbWUgfHxcblx0XHRcdFx0XHQoY21kLmFsaWFzZXMgJiYgY21kLmFsaWFzZXMuaW5jbHVkZXMoc3ViTmFtZSkpLFxuXHRcdFx0KTtcblx0XHRcdGlmICghc3ViY29tbWFuZCkge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Y3VycmVudENvbW1hbmQgPSBzdWJjb21tYW5kO1xuXHRcdH1cblxuXHRcdHJldHVybiBjdXJyZW50Q29tbWFuZDtcblx0fVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjtBQTRCakIsT0FBTyxNQUFNO0VBQ0osV0FBc0IsRUFBRSxDQUFDO0VBRWpDOzs7RUFHQyxHQUNELFNBQVMsT0FBZ0IsRUFBRTtJQUMxQiw2QkFBNkI7SUFDN0IsTUFBTSxXQUFXLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJO0lBQzlDLElBQUksVUFBVTtNQUNiLE1BQU0sSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLFFBQVEsSUFBSSxDQUFDLHVCQUF1QixDQUFDO0lBQ2xFO0lBQ0EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFDcEI7RUFFQTs7OztFQUlDLEdBQ0QsT0FBTyxJQUFZLEVBQVc7SUFDN0IsTUFBTSxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBUSxJQUFJLElBQUksS0FBSztJQUM1RCxJQUFJLFVBQVUsQ0FBQyxHQUFHO01BQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU87TUFDNUIsT0FBTztJQUNSO0lBQ0EsT0FBTztFQUNSO0VBRUE7OztFQUdDLEdBQ0QsY0FBeUI7SUFDeEIsT0FBTyxJQUFJLENBQUMsUUFBUTtFQUNyQjtFQUVBOzs7O0VBSUMsR0FDRCxZQUFZLElBQVksRUFBdUI7SUFDOUMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDeEIsQ0FBQyxNQUFRLElBQUksSUFBSSxLQUFLLFFBQVMsSUFBSSxPQUFPLElBQUksSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDO0VBRXJFO0VBRUE7Ozs7O0VBS0MsR0FDRCxlQUNDLE9BQWdCLEVBQ2hCLGNBQXdCLEVBQ0Y7SUFDdEIsSUFBSSxpQkFBaUI7SUFFckIsS0FBSyxNQUFNLFdBQVcsZUFBZ0I7TUFDckMsSUFBSSxDQUFDLGVBQWUsV0FBVyxFQUFFO1FBQ2hDLE9BQU87TUFDUjtNQUNBLE1BQU0sYUFBYSxlQUFlLFdBQVcsQ0FBQyxJQUFJLENBQ2pELENBQUMsTUFDQSxJQUFJLElBQUksS0FBSyxXQUNaLElBQUksT0FBTyxJQUFJLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQztNQUV2QyxJQUFJLENBQUMsWUFBWTtRQUNoQixPQUFPO01BQ1I7TUFDQSxpQkFBaUI7SUFDbEI7SUFFQSxPQUFPO0VBQ1I7QUFDRCJ9
// denoCacheMetadata=14162989480308163603,12097561087271019198