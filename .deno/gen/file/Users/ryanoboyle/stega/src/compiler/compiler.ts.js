// /src/compiler/compiler.ts
import { ts } from "https://deno.land/x/ts_morph@17.0.1/mod.ts";
import { Parser } from "./parser.ts";
import { Transformer } from "./transformer.ts";
import { Bundler } from "./bundler.ts";
import { CodeGenerator } from "./codegen.ts";
import { logger } from "./logger.ts";
import { DependencyGraph } from "./dependency-graph.ts";
import { Cache } from "./cache.ts";
/**
 * Compiler class orchestrates the parsing, transforming, bundling, and code generation processes.
 */ export class Compiler {
  parser;
  transformer;
  bundler;
  codeGenerator;
  cache;
  logger = logger;
  plugins = [];
  buildContext;
  depGraph;
  options;
  /**
	 * Initializes the Compiler with the provided options, setting up all components.
	 * @param partialOptions - Partial CompilerOptions to customize the compiler behavior.
	 */ constructor(partialOptions){
    const mandatoryDefaults = {
      entryPoint: "",
      outDir: "dist",
      sourceMaps: false,
      minify: false,
      target: ts.ScriptTarget.ES2020,
      plugins: [],
      module: ts.ModuleKind.ESNext,
      platform: "browser",
      externals: [],
      define: {},
      treeshake: true,
      format: "es6",
      experimentalDecorators: false,
      umdName: "bundle"
    };
    this.options = {
      ...mandatoryDefaults,
      ...partialOptions
    };
    this.parser = new Parser(this.options);
    this.transformer = new Transformer(this.options);
    this.bundler = new Bundler(this.options);
    this.codeGenerator = new CodeGenerator(this.options);
    this.cache = new Cache();
    this.depGraph = new DependencyGraph();
    this.buildContext = this.createBuildContext();
    this.registerPlugins(this.options.plugins);
  }
  createBuildContext() {
    return {
      onLoad: this.handleOnLoad.bind(this),
      onResolve: this.handleOnResolve.bind(this),
      onTransform: this.handleOnTransform.bind(this)
    };
  }
  handleOnLoad(_callback) {
  // Implementation placeholder
  }
  handleOnResolve(_callback) {
  // Implementation placeholder
  }
  handleOnTransform(_callback) {
  // Implementation placeholder
  }
  registerPlugins(plugins) {
    for (const plugin of plugins || []){
      this.plugins.push(plugin);
      plugin.setup(this.buildContext);
    }
  }
  async compile() {
    try {
      if (!this.options.entryPoint) {
        throw new Error("Entry point not specified in compiler options.");
      }
      const rawEntryModule = await this.parseModule(this.options.entryPoint);
      const entryModule = rawEntryModule;
      if (!entryModule) {
        throw new Error("Invalid entry module.");
      }
      await this.buildDependencyGraph(entryModule);
      if (this.depGraph.hasCycle()) {
        throw new Error("Dependency graph contains cycles.");
      }
      await this.depGraph.optimizeGraph();
      this.transformModules();
      const bundleResult = this.bundler.bundle(this.depGraph);
      const codeGenResult = await this.generateCode(bundleResult);
      const { code, map } = codeGenResult;
      await this.writeOutput(code, map);
    } catch (error) {
      this.logger.error("Compilation failed:", error instanceof Error ? error.message : String(error));
      throw error;
    }
  }
  async parseModule(path) {
    const contents = await Deno.readTextFile(path);
    const cached = await this.cache.get(path, contents);
    if (cached) {
      return cached;
    }
    const parseResult = this.parser.parse(contents, path);
    const mod = {
      path,
      code: parseResult.ast.getFullText(),
      dependencies: parseResult.dependencies,
      ast: parseResult.ast
    };
    await this.cache.set(path, mod, contents);
    return mod;
  }
  async buildDependencyGraph(entryModule) {
    await this.depGraph.build(entryModule, {
      parseModule: async (depPath)=>{
        return await this.parseModule(depPath);
      }
    });
  }
  transformModules() {
    const modules = this.depGraph.getAllModules();
    for (const module of modules){
      const result = this.transformer.transform({
        ast: module.ast,
        path: module.path
      });
      module.code = result.ast.getFullText();
      module.ast = result.ast;
    }
  }
  async generateCode(bundleResult) {
    const convertedModules = new Map();
    for (const [key, value] of bundleResult.modules){
      convertedModules.set(key, value);
    }
    const generatedOutput = await this.codeGenerator.generate({
      ast: bundleResult.code,
      modules: convertedModules
    }, {
      sourceMaps: this.options.sourceMaps,
      minify: this.options.minify,
      target: ts.ScriptTarget[this.options.target].toLowerCase(),
      format: this.options.format,
      platform: this.options.platform,
      externals: this.options.externals
    });
    return generatedOutput;
  }
  async writeOutput(code, sourceMap) {
    await Deno.mkdir(this.options.outDir, {
      recursive: true
    });
    const outPath = `${this.options.outDir}/bundle.js`;
    await Deno.writeTextFile(outPath, code);
    if (sourceMap) {
      await Deno.writeTextFile(`${outPath}.map`, sourceMap);
    }
  }
}
//# sourceMappingURL=data:application/json;base64,
// denoCacheMetadata=12626561808614619771,10498282038813232209