// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
import { AssertionError } from "./assertion_error.ts";
import { assertIsError } from "./assert_is_error.ts";
export async function assertRejects(fn, errorClassOrMsg, msgIncludesOrMsg, msg) {
  // deno-lint-ignore no-explicit-any
  let ErrorClass = undefined;
  let msgIncludes = undefined;
  let err;
  if (typeof errorClassOrMsg !== "string") {
    if (errorClassOrMsg === undefined || errorClassOrMsg.prototype instanceof Error || errorClassOrMsg.prototype === Error.prototype) {
      // deno-lint-ignore no-explicit-any
      ErrorClass = errorClassOrMsg;
      msgIncludes = msgIncludesOrMsg;
    }
  } else {
    msg = errorClassOrMsg;
  }
  let doesThrow = false;
  let isPromiseReturned = false;
  const msgSuffix = msg ? `: ${msg}` : ".";
  try {
    const possiblePromise = fn();
    if (possiblePromise && typeof possiblePromise === "object" && typeof possiblePromise.then === "function") {
      isPromiseReturned = true;
      await possiblePromise;
    }
  } catch (error) {
    if (!isPromiseReturned) {
      throw new AssertionError(`Function throws when expected to reject${msgSuffix}`);
    }
    if (ErrorClass) {
      if (error instanceof Error === false) {
        throw new AssertionError(`A non-Error object was rejected${msgSuffix}`);
      }
      assertIsError(error, ErrorClass, msgIncludes, msg);
    }
    err = error;
    doesThrow = true;
  }
  if (!doesThrow) {
    throw new AssertionError(`Expected function to reject${msgSuffix}`);
  }
  return err;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjIwMy4wL2Fzc2VydC9hc3NlcnRfcmVqZWN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzIHRoZSBEZW5vIGF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuIE1JVCBsaWNlbnNlLlxuaW1wb3J0IHsgQXNzZXJ0aW9uRXJyb3IgfSBmcm9tIFwiLi9hc3NlcnRpb25fZXJyb3IudHNcIjtcbmltcG9ydCB7IGFzc2VydElzRXJyb3IgfSBmcm9tIFwiLi9hc3NlcnRfaXNfZXJyb3IudHNcIjtcblxuLyoqXG4gKiBFeGVjdXRlcyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSBwcm9taXNlLCBleHBlY3RpbmcgaXQgdG8gcmVqZWN0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgYXNzZXJ0UmVqZWN0cyB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAJFNURF9WRVJTSU9OL2Fzc2VydC9hc3NlcnRfcmVqZWN0cy50c1wiO1xuICpcbiAqIERlbm8udGVzdChcImRvZXNUaHJvd1wiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gKiAgIGF3YWl0IGFzc2VydFJlamVjdHMoXG4gKiAgICAgYXN5bmMgKCkgPT4ge1xuICogICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImhlbGxvIHdvcmxkIVwiKTtcbiAqICAgICB9LFxuICogICApO1xuICogICBhd2FpdCBhc3NlcnRSZWplY3RzKFxuICogICAgIGFzeW5jICgpID0+IHtcbiAqICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoKSk7XG4gKiAgICAgfSxcbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIC8vIFRoaXMgdGVzdCB3aWxsIG5vdCBwYXNzLlxuICogRGVuby50ZXN0KFwiZmFpbHNcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICogICBhd2FpdCBhc3NlcnRSZWplY3RzKFxuICogICAgIGFzeW5jICgpID0+IHtcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiSGVsbG8gd29ybGRcIik7XG4gKiAgICAgfSxcbiAqICAgKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRSZWplY3RzKFxuICBmbjogKCkgPT4gUHJvbWlzZUxpa2U8dW5rbm93bj4sXG4gIG1zZz86IHN0cmluZyxcbik6IFByb21pc2U8dW5rbm93bj47XG4vKipcbiAqIEV4ZWN1dGVzIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHByb21pc2UsIGV4cGVjdGluZyBpdCB0byByZWplY3QuXG4gKiBJZiBpdCBkb2VzIG5vdCwgdGhlbiBpdCB0aHJvd3MuIEFuIGVycm9yIGNsYXNzIGFuZCBhIHN0cmluZyB0aGF0IHNob3VsZCBiZVxuICogaW5jbHVkZWQgaW4gdGhlIGVycm9yIG1lc3NhZ2UgY2FuIGFsc28gYmUgYXNzZXJ0ZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBhc3NlcnRSZWplY3RzIH0gZnJvbSBcImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAkU1REX1ZFUlNJT04vYXNzZXJ0L2Fzc2VydF9yZWplY3RzLnRzXCI7XG4gKlxuICogRGVuby50ZXN0KFwiZG9lc1Rocm93XCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAqICAgYXdhaXQgYXNzZXJ0UmVqZWN0cyhhc3luYyAoKSA9PiB7XG4gKiAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImhlbGxvIHdvcmxkIVwiKTtcbiAqICAgfSwgVHlwZUVycm9yKTtcbiAqICAgYXdhaXQgYXNzZXJ0UmVqZWN0cyhcbiAqICAgICBhc3luYyAoKSA9PiB7XG4gKiAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaGVsbG8gd29ybGQhXCIpO1xuICogICAgIH0sXG4gKiAgICAgVHlwZUVycm9yLFxuICogICAgIFwiaGVsbG9cIixcbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIC8vIFRoaXMgdGVzdCB3aWxsIG5vdCBwYXNzLlxuICogRGVuby50ZXN0KFwiZmFpbHNcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICogICBhd2FpdCBhc3NlcnRSZWplY3RzKFxuICogICAgIGFzeW5jICgpID0+IHtcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiSGVsbG8gd29ybGRcIik7XG4gKiAgICAgfSxcbiAqICAgKTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRSZWplY3RzPEUgZXh0ZW5kcyBFcnJvciA9IEVycm9yPihcbiAgZm46ICgpID0+IFByb21pc2VMaWtlPHVua25vd24+LFxuICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICBFcnJvckNsYXNzOiBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBFLFxuICBtc2dJbmNsdWRlcz86IHN0cmluZyxcbiAgbXNnPzogc3RyaW5nLFxuKTogUHJvbWlzZTxFPjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhc3NlcnRSZWplY3RzPEUgZXh0ZW5kcyBFcnJvciA9IEVycm9yPihcbiAgZm46ICgpID0+IFByb21pc2VMaWtlPHVua25vd24+LFxuICBlcnJvckNsYXNzT3JNc2c/OlxuICAgIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gICAgfCAobmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gRSlcbiAgICB8IHN0cmluZyxcbiAgbXNnSW5jbHVkZXNPck1zZz86IHN0cmluZyxcbiAgbXNnPzogc3RyaW5nLFxuKTogUHJvbWlzZTxFIHwgRXJyb3IgfCB1bmtub3duPiB7XG4gIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gIGxldCBFcnJvckNsYXNzOiAobmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gRSkgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIGxldCBtc2dJbmNsdWRlczogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICBsZXQgZXJyO1xuXG4gIGlmICh0eXBlb2YgZXJyb3JDbGFzc09yTXNnICE9PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKFxuICAgICAgZXJyb3JDbGFzc09yTXNnID09PSB1bmRlZmluZWQgfHxcbiAgICAgIGVycm9yQ2xhc3NPck1zZy5wcm90b3R5cGUgaW5zdGFuY2VvZiBFcnJvciB8fFxuICAgICAgZXJyb3JDbGFzc09yTXNnLnByb3RvdHlwZSA9PT0gRXJyb3IucHJvdG90eXBlXG4gICAgKSB7XG4gICAgICAvLyBkZW5vLWxpbnQtaWdub3JlIG5vLWV4cGxpY2l0LWFueVxuICAgICAgRXJyb3JDbGFzcyA9IGVycm9yQ2xhc3NPck1zZyBhcyBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBFO1xuICAgICAgbXNnSW5jbHVkZXMgPSBtc2dJbmNsdWRlc09yTXNnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBlcnJvckNsYXNzT3JNc2c7XG4gIH1cbiAgbGV0IGRvZXNUaHJvdyA9IGZhbHNlO1xuICBsZXQgaXNQcm9taXNlUmV0dXJuZWQgPSBmYWxzZTtcbiAgY29uc3QgbXNnU3VmZml4ID0gbXNnID8gYDogJHttc2d9YCA6IFwiLlwiO1xuICB0cnkge1xuICAgIGNvbnN0IHBvc3NpYmxlUHJvbWlzZSA9IGZuKCk7XG4gICAgaWYgKFxuICAgICAgcG9zc2libGVQcm9taXNlICYmXG4gICAgICB0eXBlb2YgcG9zc2libGVQcm9taXNlID09PSBcIm9iamVjdFwiICYmXG4gICAgICB0eXBlb2YgcG9zc2libGVQcm9taXNlLnRoZW4gPT09IFwiZnVuY3Rpb25cIlxuICAgICkge1xuICAgICAgaXNQcm9taXNlUmV0dXJuZWQgPSB0cnVlO1xuICAgICAgYXdhaXQgcG9zc2libGVQcm9taXNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoIWlzUHJvbWlzZVJldHVybmVkKSB7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgIGBGdW5jdGlvbiB0aHJvd3Mgd2hlbiBleHBlY3RlZCB0byByZWplY3Qke21zZ1N1ZmZpeH1gLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKEVycm9yQ2xhc3MpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoYEEgbm9uLUVycm9yIG9iamVjdCB3YXMgcmVqZWN0ZWQke21zZ1N1ZmZpeH1gKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydElzRXJyb3IoXG4gICAgICAgIGVycm9yLFxuICAgICAgICBFcnJvckNsYXNzLFxuICAgICAgICBtc2dJbmNsdWRlcyxcbiAgICAgICAgbXNnLFxuICAgICAgKTtcbiAgICB9XG4gICAgZXJyID0gZXJyb3I7XG4gICAgZG9lc1Rocm93ID0gdHJ1ZTtcbiAgfVxuICBpZiAoIWRvZXNUaHJvdykge1xuICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgIGBFeHBlY3RlZCBmdW5jdGlvbiB0byByZWplY3Qke21zZ1N1ZmZpeH1gLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGVycjtcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwRUFBMEU7QUFDMUUsU0FBUyxjQUFjLFFBQVEsdUJBQXVCO0FBQ3RELFNBQVMsYUFBYSxRQUFRLHVCQUF1QjtBQTJFckQsT0FBTyxlQUFlLGNBQ3BCLEVBQThCLEVBQzlCLGVBR1UsRUFDVixnQkFBeUIsRUFDekIsR0FBWTtFQUVaLG1DQUFtQztFQUNuQyxJQUFJLGFBQXNEO0VBQzFELElBQUksY0FBa0M7RUFDdEMsSUFBSTtFQUVKLElBQUksT0FBTyxvQkFBb0IsVUFBVTtJQUN2QyxJQUNFLG9CQUFvQixhQUNwQixnQkFBZ0IsU0FBUyxZQUFZLFNBQ3JDLGdCQUFnQixTQUFTLEtBQUssTUFBTSxTQUFTLEVBQzdDO01BQ0EsbUNBQW1DO01BQ25DLGFBQWE7TUFDYixjQUFjO0lBQ2hCO0VBQ0YsT0FBTztJQUNMLE1BQU07RUFDUjtFQUNBLElBQUksWUFBWTtFQUNoQixJQUFJLG9CQUFvQjtFQUN4QixNQUFNLFlBQVksTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRztFQUNyQyxJQUFJO0lBQ0YsTUFBTSxrQkFBa0I7SUFDeEIsSUFDRSxtQkFDQSxPQUFPLG9CQUFvQixZQUMzQixPQUFPLGdCQUFnQixJQUFJLEtBQUssWUFDaEM7TUFDQSxvQkFBb0I7TUFDcEIsTUFBTTtJQUNSO0VBQ0YsRUFBRSxPQUFPLE9BQU87SUFDZCxJQUFJLENBQUMsbUJBQW1CO01BQ3RCLE1BQU0sSUFBSSxlQUNSLENBQUMsdUNBQXVDLEVBQUUsVUFBVSxDQUFDO0lBRXpEO0lBQ0EsSUFBSSxZQUFZO01BQ2QsSUFBSSxpQkFBaUIsVUFBVSxPQUFPO1FBQ3BDLE1BQU0sSUFBSSxlQUFlLENBQUMsK0JBQStCLEVBQUUsVUFBVSxDQUFDO01BQ3hFO01BQ0EsY0FDRSxPQUNBLFlBQ0EsYUFDQTtJQUVKO0lBQ0EsTUFBTTtJQUNOLFlBQVk7RUFDZDtFQUNBLElBQUksQ0FBQyxXQUFXO0lBQ2QsTUFBTSxJQUFJLGVBQ1IsQ0FBQywyQkFBMkIsRUFBRSxVQUFVLENBQUM7RUFFN0M7RUFDQSxPQUFPO0FBQ1QifQ==
// denoCacheMetadata=5022137317713267594,4062451741669104890