import { GenericPrompt } from "./_generic_prompt.ts";
import { underline } from "./deps.ts";
import { GenericInput } from "./_generic_input.ts";
/**
 * Secret prompt representation.
 *
 * ```ts
 * import { Secret } from "./mod.ts";
 *
 * const password: string = await Secret.prompt("Enter your password");
 * ```
 */ export class Secret extends GenericInput {
  settings;
  /** Execute the prompt with provided message or options. */ static prompt(options) {
    return new this(options).prompt();
  }
  /**
   * Inject prompt value. If called, the prompt doesn't prompt for an input and
   * returns immediately the injected value. Can be used for unit tests or pre
   * selections.
   *
   * @param value Input value.
   */ static inject(value) {
    GenericPrompt.inject(value);
  }
  constructor(options){
    super();
    if (typeof options === "string") {
      options = {
        message: options
      };
    }
    this.settings = this.getDefaultSettings(options);
  }
  getDefaultSettings(options) {
    return {
      ...super.getDefaultSettings(options),
      label: options.label ?? "Secret",
      hidden: options.hidden ?? false,
      minLength: options.minLength ?? 0,
      maxLength: options.maxLength ?? Infinity
    };
  }
  input() {
    return underline(this.settings.hidden ? "" : "*".repeat(this.inputValue.length));
  }
  /** Read user input. */ read() {
    if (this.settings.hidden) {
      this.settings.tty.cursorHide();
    }
    return super.read();
  }
  /**
   * Validate input value.
   * @param value User input value.
   * @return True on success, false or error message on error.
   */ validate(value) {
    if (typeof value !== "string") {
      return false;
    }
    if (value.length < this.settings.minLength) {
      return `${this.settings.label} must be longer than ${this.settings.minLength} but has a length of ${value.length}.`;
    }
    if (value.length > this.settings.maxLength) {
      return `${this.settings.label} can't be longer than ${this.settings.maxLength} but has a length of ${value.length}.`;
    }
    return true;
  }
  /**
   * Map input value to output value.
   * @param value Input value.
   * @return Output value.
   */ transform(value) {
    return value;
  }
  /**
   * Format output value.
   * @param value Output value.
   */ format(value) {
    return this.settings.hidden ? "*".repeat(8) : "*".repeat(value.length);
  }
  /** Get input input. */ getValue() {
    return this.inputValue;
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvY2xpZmZ5QHYxLjAuMC1yYy4zL3Byb21wdC9zZWNyZXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2VuZXJpY1Byb21wdCB9IGZyb20gXCIuL19nZW5lcmljX3Byb21wdC50c1wiO1xuaW1wb3J0IHsgdW5kZXJsaW5lIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IHtcbiAgR2VuZXJpY0lucHV0LFxuICBHZW5lcmljSW5wdXRLZXlzLFxuICBHZW5lcmljSW5wdXRQcm9tcHRPcHRpb25zLFxuICBHZW5lcmljSW5wdXRQcm9tcHRTZXR0aW5ncyxcbn0gZnJvbSBcIi4vX2dlbmVyaWNfaW5wdXQudHNcIjtcblxuLyoqIFNlY3JldCBwcm9tcHQgb3B0aW9ucy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2VjcmV0T3B0aW9uc1xuICBleHRlbmRzIEdlbmVyaWNJbnB1dFByb21wdE9wdGlvbnM8c3RyaW5nLCBzdHJpbmc+IHtcbiAga2V5cz86IFNlY3JldEtleXM7XG4gIC8qKiBDaGFuZ2UgcHJvbXB0IGxhYmVsLiBEZWZhdWx0IGlzIGBTZWNyZXRgLiAqL1xuICBsYWJlbD86IHN0cmluZztcbiAgLyoqXG4gICAqIElmIGVuYWJsZWQsIHRoZSBpbnB1dCB2YWx1ZSBpcyBoaWRkZW4sIG90aGVyd2lzZSBlYWNoIGNoYXJhY3RlciBpcyByZXBsYWNlZFxuICAgKiB3aXRoIGEgYCpgLlxuICAgKi9cbiAgaGlkZGVuPzogYm9vbGVhbjtcbiAgLyoqIExpbWl0IG1pbmltdW0gYWxsb3dlZCBsZW5ndGggb2YgdGhlIHNlY3JldC4gKi9cbiAgbWluTGVuZ3RoPzogbnVtYmVyO1xuICAvKiogTGltaXQgbWF4aW11bSBhbGxvd2VkIGxlbmd0aCBvZiB0aGUgc2VjcmV0LiAqL1xuICBtYXhMZW5ndGg/OiBudW1iZXI7XG59XG5cbi8qKiBTZWNyZXQgcHJvbXB0IHNldHRpbmdzLiAqL1xuaW50ZXJmYWNlIFNlY3JldFNldHRpbmdzIGV4dGVuZHMgR2VuZXJpY0lucHV0UHJvbXB0U2V0dGluZ3M8c3RyaW5nLCBzdHJpbmc+IHtcbiAgbGFiZWw6IHN0cmluZztcbiAgaGlkZGVuOiBib29sZWFuO1xuICBtaW5MZW5ndGg6IG51bWJlcjtcbiAgbWF4TGVuZ3RoOiBudW1iZXI7XG4gIGtleXM/OiBTZWNyZXRLZXlzO1xufVxuXG4vKiogU2VjcmV0IHByb21wdCBrZXltYXAuICovXG5leHBvcnQgdHlwZSBTZWNyZXRLZXlzID0gR2VuZXJpY0lucHV0S2V5cztcblxuLyoqXG4gKiBTZWNyZXQgcHJvbXB0IHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBTZWNyZXQgfSBmcm9tIFwiLi9tb2QudHNcIjtcbiAqXG4gKiBjb25zdCBwYXNzd29yZDogc3RyaW5nID0gYXdhaXQgU2VjcmV0LnByb21wdChcIkVudGVyIHlvdXIgcGFzc3dvcmRcIik7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNlY3JldCBleHRlbmRzIEdlbmVyaWNJbnB1dDxzdHJpbmcsIHN0cmluZz4ge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgc2V0dGluZ3M6IFNlY3JldFNldHRpbmdzO1xuXG4gIC8qKiBFeGVjdXRlIHRoZSBwcm9tcHQgd2l0aCBwcm92aWRlZCBtZXNzYWdlIG9yIG9wdGlvbnMuICovXG4gIHB1YmxpYyBzdGF0aWMgcHJvbXB0KG9wdGlvbnM6IHN0cmluZyB8IFNlY3JldE9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiBuZXcgdGhpcyhvcHRpb25zKS5wcm9tcHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmplY3QgcHJvbXB0IHZhbHVlLiBJZiBjYWxsZWQsIHRoZSBwcm9tcHQgZG9lc24ndCBwcm9tcHQgZm9yIGFuIGlucHV0IGFuZFxuICAgKiByZXR1cm5zIGltbWVkaWF0ZWx5IHRoZSBpbmplY3RlZCB2YWx1ZS4gQ2FuIGJlIHVzZWQgZm9yIHVuaXQgdGVzdHMgb3IgcHJlXG4gICAqIHNlbGVjdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZSBJbnB1dCB2YWx1ZS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgaW5qZWN0KHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBHZW5lcmljUHJvbXB0LmluamVjdCh2YWx1ZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBzdHJpbmcgfCBTZWNyZXRPcHRpb25zKSB7XG4gICAgc3VwZXIoKTtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG9wdGlvbnMgPSB7IG1lc3NhZ2U6IG9wdGlvbnMgfTtcbiAgICB9XG4gICAgdGhpcy5zZXR0aW5ncyA9IHRoaXMuZ2V0RGVmYXVsdFNldHRpbmdzKG9wdGlvbnMpO1xuICB9XG5cbiAgcHVibGljIGdldERlZmF1bHRTZXR0aW5ncyhvcHRpb25zOiBTZWNyZXRPcHRpb25zKTogU2VjcmV0U2V0dGluZ3Mge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5zdXBlci5nZXREZWZhdWx0U2V0dGluZ3Mob3B0aW9ucyksXG4gICAgICBsYWJlbDogb3B0aW9ucy5sYWJlbCA/PyBcIlNlY3JldFwiLFxuICAgICAgaGlkZGVuOiBvcHRpb25zLmhpZGRlbiA/PyBmYWxzZSxcbiAgICAgIG1pbkxlbmd0aDogb3B0aW9ucy5taW5MZW5ndGggPz8gMCxcbiAgICAgIG1heExlbmd0aDogb3B0aW9ucy5tYXhMZW5ndGggPz8gSW5maW5pdHksXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbnB1dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB1bmRlcmxpbmUoXG4gICAgICB0aGlzLnNldHRpbmdzLmhpZGRlbiA/IFwiXCIgOiBcIipcIi5yZXBlYXQodGhpcy5pbnB1dFZhbHVlLmxlbmd0aCksXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBSZWFkIHVzZXIgaW5wdXQuICovXG4gIHByb3RlY3RlZCByZWFkKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGlmICh0aGlzLnNldHRpbmdzLmhpZGRlbikge1xuICAgICAgdGhpcy5zZXR0aW5ncy50dHkuY3Vyc29ySGlkZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIucmVhZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGlucHV0IHZhbHVlLlxuICAgKiBAcGFyYW0gdmFsdWUgVXNlciBpbnB1dCB2YWx1ZS5cbiAgICogQHJldHVybiBUcnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9yIGVycm9yIG1lc3NhZ2Ugb24gZXJyb3IuXG4gICAqL1xuICBwcm90ZWN0ZWQgdmFsaWRhdGUodmFsdWU6IHN0cmluZyk6IGJvb2xlYW4gfCBzdHJpbmcge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA8IHRoaXMuc2V0dGluZ3MubWluTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYCR7dGhpcy5zZXR0aW5ncy5sYWJlbH0gbXVzdCBiZSBsb25nZXIgdGhhbiAke3RoaXMuc2V0dGluZ3MubWluTGVuZ3RofSBidXQgaGFzIGEgbGVuZ3RoIG9mICR7dmFsdWUubGVuZ3RofS5gO1xuICAgIH1cbiAgICBpZiAodmFsdWUubGVuZ3RoID4gdGhpcy5zZXR0aW5ncy5tYXhMZW5ndGgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLnNldHRpbmdzLmxhYmVsfSBjYW4ndCBiZSBsb25nZXIgdGhhbiAke3RoaXMuc2V0dGluZ3MubWF4TGVuZ3RofSBidXQgaGFzIGEgbGVuZ3RoIG9mICR7dmFsdWUubGVuZ3RofS5gO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXAgaW5wdXQgdmFsdWUgdG8gb3V0cHV0IHZhbHVlLlxuICAgKiBAcGFyYW0gdmFsdWUgSW5wdXQgdmFsdWUuXG4gICAqIEByZXR1cm4gT3V0cHV0IHZhbHVlLlxuICAgKi9cbiAgcHJvdGVjdGVkIHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IG91dHB1dCB2YWx1ZS5cbiAgICogQHBhcmFtIHZhbHVlIE91dHB1dCB2YWx1ZS5cbiAgICovXG4gIHByb3RlY3RlZCBmb3JtYXQodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuaGlkZGVuID8gXCIqXCIucmVwZWF0KDgpIDogXCIqXCIucmVwZWF0KHZhbHVlLmxlbmd0aCk7XG4gIH1cblxuICAvKiogR2V0IGlucHV0IGlucHV0LiAqL1xuICBwcm90ZWN0ZWQgZ2V0VmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dFZhbHVlO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxhQUFhLFFBQVEsdUJBQXVCO0FBQ3JELFNBQVMsU0FBUyxRQUFRLFlBQVk7QUFDdEMsU0FDRSxZQUFZLFFBSVAsc0JBQXNCO0FBK0I3Qjs7Ozs7Ozs7Q0FRQyxHQUNELE9BQU8sTUFBTSxlQUFlO0VBQ1AsU0FBeUI7RUFFNUMseURBQXlELEdBQ3pELE9BQWMsT0FBTyxPQUErQixFQUFtQjtJQUNyRSxPQUFPLElBQUksSUFBSSxDQUFDLFNBQVMsTUFBTTtFQUNqQztFQUVBOzs7Ozs7R0FNQyxHQUNELE9BQWMsT0FBTyxLQUFhLEVBQVE7SUFDeEMsY0FBYyxNQUFNLENBQUM7RUFDdkI7RUFFQSxZQUFZLE9BQStCLENBQUU7SUFDM0MsS0FBSztJQUNMLElBQUksT0FBTyxZQUFZLFVBQVU7TUFDL0IsVUFBVTtRQUFFLFNBQVM7TUFBUTtJQUMvQjtJQUNBLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO0VBQzFDO0VBRU8sbUJBQW1CLE9BQXNCLEVBQWtCO0lBQ2hFLE9BQU87TUFDTCxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsUUFBUTtNQUNwQyxPQUFPLFFBQVEsS0FBSyxJQUFJO01BQ3hCLFFBQVEsUUFBUSxNQUFNLElBQUk7TUFDMUIsV0FBVyxRQUFRLFNBQVMsSUFBSTtNQUNoQyxXQUFXLFFBQVEsU0FBUyxJQUFJO0lBQ2xDO0VBQ0Y7RUFFVSxRQUFnQjtJQUN4QixPQUFPLFVBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU07RUFFakU7RUFFQSxxQkFBcUIsR0FDckIsQUFBVSxPQUF5QjtJQUNqQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO01BQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVU7SUFDOUI7SUFDQSxPQUFPLEtBQUssQ0FBQztFQUNmO0VBRUE7Ozs7R0FJQyxHQUNELEFBQVUsU0FBUyxLQUFhLEVBQW9CO0lBQ2xELElBQUksT0FBTyxVQUFVLFVBQVU7TUFDN0IsT0FBTztJQUNUO0lBQ0EsSUFBSSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtNQUMxQyxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxNQUFNLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckg7SUFDQSxJQUFJLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO01BQzFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLHFCQUFxQixFQUFFLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN0SDtJQUNBLE9BQU87RUFDVDtFQUVBOzs7O0dBSUMsR0FDRCxBQUFVLFVBQVUsS0FBYSxFQUFzQjtJQUNyRCxPQUFPO0VBQ1Q7RUFFQTs7O0dBR0MsR0FDRCxBQUFVLE9BQU8sS0FBYSxFQUFVO0lBQ3RDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLE1BQU07RUFDdkU7RUFFQSxxQkFBcUIsR0FDckIsQUFBVSxXQUFtQjtJQUMzQixPQUFPLElBQUksQ0FBQyxVQUFVO0VBQ3hCO0FBQ0YifQ==
// denoCacheMetadata=9278979316378320993,1887410224024828128