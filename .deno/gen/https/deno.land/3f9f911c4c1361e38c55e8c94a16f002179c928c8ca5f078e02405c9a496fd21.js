// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
import { assertIsError } from "./assert_is_error.ts";
import { AssertionError } from "./assertion_error.ts";
export function assertThrows(fn, errorClassOrMsg, msgIncludesOrMsg, msg) {
  // deno-lint-ignore no-explicit-any
  let ErrorClass = undefined;
  let msgIncludes = undefined;
  let err;
  if (typeof errorClassOrMsg !== "string") {
    if (errorClassOrMsg === undefined || errorClassOrMsg.prototype instanceof Error || errorClassOrMsg.prototype === Error.prototype) {
      // deno-lint-ignore no-explicit-any
      ErrorClass = errorClassOrMsg;
      msgIncludes = msgIncludesOrMsg;
    } else {
      msg = msgIncludesOrMsg;
    }
  } else {
    msg = errorClassOrMsg;
  }
  let doesThrow = false;
  const msgSuffix = msg ? `: ${msg}` : ".";
  try {
    fn();
  } catch (error) {
    if (ErrorClass) {
      if (error instanceof Error === false) {
        throw new AssertionError(`A non-Error object was thrown${msgSuffix}`);
      }
      assertIsError(error, ErrorClass, msgIncludes, msg);
    }
    err = error;
    doesThrow = true;
  }
  if (!doesThrow) {
    msg = `Expected function to throw${msgSuffix}`;
    throw new AssertionError(msg);
  }
  return err;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjIwMy4wL2Fzc2VydC9hc3NlcnRfdGhyb3dzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjMgdGhlIERlbm8gYXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC4gTUlUIGxpY2Vuc2UuXG5pbXBvcnQgeyBhc3NlcnRJc0Vycm9yIH0gZnJvbSBcIi4vYXNzZXJ0X2lzX2Vycm9yLnRzXCI7XG5pbXBvcnQgeyBBc3NlcnRpb25FcnJvciB9IGZyb20gXCIuL2Fzc2VydGlvbl9lcnJvci50c1wiO1xuXG4vKipcbiAqIEV4ZWN1dGVzIGEgZnVuY3Rpb24sIGV4cGVjdGluZyBpdCB0byB0aHJvdy4gSWYgaXQgZG9lcyBub3QsIHRoZW4gaXRcbiAqIHRocm93cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGFzc2VydFRocm93cyB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAJFNURF9WRVJTSU9OL2Fzc2VydC9hc3NlcnRfdGhyb3dzLnRzXCI7XG4gKlxuICogRGVuby50ZXN0KFwiZG9lc1Rocm93XCIsIGZ1bmN0aW9uICgpOiB2b2lkIHtcbiAqICAgYXNzZXJ0VGhyb3dzKCgpOiB2b2lkID0+IHtcbiAqICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaGVsbG8gd29ybGQhXCIpO1xuICogICB9KTtcbiAqIH0pO1xuICpcbiAqIC8vIFRoaXMgdGVzdCB3aWxsIG5vdCBwYXNzLlxuICogRGVuby50ZXN0KFwiZmFpbHNcIiwgZnVuY3Rpb24gKCk6IHZvaWQge1xuICogICBhc3NlcnRUaHJvd3MoKCk6IHZvaWQgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKFwiSGVsbG8gd29ybGRcIik7XG4gKiAgIH0pO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFRocm93cyhcbiAgZm46ICgpID0+IHVua25vd24sXG4gIG1zZz86IHN0cmluZyxcbik6IHVua25vd247XG4vKipcbiAqIEV4ZWN1dGVzIGEgZnVuY3Rpb24sIGV4cGVjdGluZyBpdCB0byB0aHJvdy4gSWYgaXQgZG9lcyBub3QsIHRoZW4gaXRcbiAqIHRocm93cy4gQW4gZXJyb3IgY2xhc3MgYW5kIGEgc3RyaW5nIHRoYXQgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHRoZVxuICogZXJyb3IgbWVzc2FnZSBjYW4gYWxzbyBiZSBhc3NlcnRlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGFzc2VydFRocm93cyB9IGZyb20gXCJodHRwczovL2Rlbm8ubGFuZC9zdGRAJFNURF9WRVJTSU9OL2Fzc2VydC9hc3NlcnRfdGhyb3dzLnRzXCI7XG4gKlxuICogRGVuby50ZXN0KFwiZG9lc1Rocm93XCIsIGZ1bmN0aW9uICgpOiB2b2lkIHtcbiAqICAgYXNzZXJ0VGhyb3dzKCgpOiB2b2lkID0+IHtcbiAqICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiaGVsbG8gd29ybGQhXCIpO1xuICogICB9LCBUeXBlRXJyb3IpO1xuICogICBhc3NlcnRUaHJvd3MoXG4gKiAgICAgKCk6IHZvaWQgPT4ge1xuICogICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImhlbGxvIHdvcmxkIVwiKTtcbiAqICAgICB9LFxuICogICAgIFR5cGVFcnJvcixcbiAqICAgICBcImhlbGxvXCIsXG4gKiAgICk7XG4gKiB9KTtcbiAqXG4gKiAvLyBUaGlzIHRlc3Qgd2lsbCBub3QgcGFzcy5cbiAqIERlbm8udGVzdChcImZhaWxzXCIsIGZ1bmN0aW9uICgpOiB2b2lkIHtcbiAqICAgYXNzZXJ0VGhyb3dzKCgpOiB2b2lkID0+IHtcbiAqICAgICBjb25zb2xlLmxvZyhcIkhlbGxvIHdvcmxkXCIpO1xuICogICB9KTtcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUaHJvd3M8RSBleHRlbmRzIEVycm9yID0gRXJyb3I+KFxuICBmbjogKCkgPT4gdW5rbm93bixcbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgRXJyb3JDbGFzczogbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gRSxcbiAgbXNnSW5jbHVkZXM/OiBzdHJpbmcsXG4gIG1zZz86IHN0cmluZyxcbik6IEU7XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VGhyb3dzPEUgZXh0ZW5kcyBFcnJvciA9IEVycm9yPihcbiAgZm46ICgpID0+IHVua25vd24sXG4gIGVycm9yQ2xhc3NPck1zZz86XG4gICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICB8IChuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBFKVxuICAgIHwgc3RyaW5nLFxuICBtc2dJbmNsdWRlc09yTXNnPzogc3RyaW5nLFxuICBtc2c/OiBzdHJpbmcsXG4pOiBFIHwgRXJyb3IgfCB1bmtub3duIHtcbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgbGV0IEVycm9yQ2xhc3M6IChuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBFKSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgbGV0IG1zZ0luY2x1ZGVzOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIGxldCBlcnI7XG5cbiAgaWYgKHR5cGVvZiBlcnJvckNsYXNzT3JNc2cgIT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoXG4gICAgICBlcnJvckNsYXNzT3JNc2cgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgZXJyb3JDbGFzc09yTXNnLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yIHx8XG4gICAgICBlcnJvckNsYXNzT3JNc2cucHJvdG90eXBlID09PSBFcnJvci5wcm90b3R5cGVcbiAgICApIHtcbiAgICAgIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gICAgICBFcnJvckNsYXNzID0gZXJyb3JDbGFzc09yTXNnIGFzIG5ldyAoLi4uYXJnczogYW55W10pID0+IEU7XG4gICAgICBtc2dJbmNsdWRlcyA9IG1zZ0luY2x1ZGVzT3JNc2c7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1zZyA9IG1zZ0luY2x1ZGVzT3JNc2c7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1zZyA9IGVycm9yQ2xhc3NPck1zZztcbiAgfVxuICBsZXQgZG9lc1Rocm93ID0gZmFsc2U7XG4gIGNvbnN0IG1zZ1N1ZmZpeCA9IG1zZyA/IGA6ICR7bXNnfWAgOiBcIi5cIjtcbiAgdHJ5IHtcbiAgICBmbigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChFcnJvckNsYXNzKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKGBBIG5vbi1FcnJvciBvYmplY3Qgd2FzIHRocm93biR7bXNnU3VmZml4fWApO1xuICAgICAgfVxuICAgICAgYXNzZXJ0SXNFcnJvcihcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIEVycm9yQ2xhc3MsXG4gICAgICAgIG1zZ0luY2x1ZGVzLFxuICAgICAgICBtc2csXG4gICAgICApO1xuICAgIH1cbiAgICBlcnIgPSBlcnJvcjtcbiAgICBkb2VzVGhyb3cgPSB0cnVlO1xuICB9XG4gIGlmICghZG9lc1Rocm93KSB7XG4gICAgbXNnID0gYEV4cGVjdGVkIGZ1bmN0aW9uIHRvIHRocm93JHttc2dTdWZmaXh9YDtcbiAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobXNnKTtcbiAgfVxuICByZXR1cm4gZXJyO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDBFQUEwRTtBQUMxRSxTQUFTLGFBQWEsUUFBUSx1QkFBdUI7QUFDckQsU0FBUyxjQUFjLFFBQVEsdUJBQXVCO0FBaUV0RCxPQUFPLFNBQVMsYUFDZCxFQUFpQixFQUNqQixlQUdVLEVBQ1YsZ0JBQXlCLEVBQ3pCLEdBQVk7RUFFWixtQ0FBbUM7RUFDbkMsSUFBSSxhQUFzRDtFQUMxRCxJQUFJLGNBQWtDO0VBQ3RDLElBQUk7RUFFSixJQUFJLE9BQU8sb0JBQW9CLFVBQVU7SUFDdkMsSUFDRSxvQkFBb0IsYUFDcEIsZ0JBQWdCLFNBQVMsWUFBWSxTQUNyQyxnQkFBZ0IsU0FBUyxLQUFLLE1BQU0sU0FBUyxFQUM3QztNQUNBLG1DQUFtQztNQUNuQyxhQUFhO01BQ2IsY0FBYztJQUNoQixPQUFPO01BQ0wsTUFBTTtJQUNSO0VBQ0YsT0FBTztJQUNMLE1BQU07RUFDUjtFQUNBLElBQUksWUFBWTtFQUNoQixNQUFNLFlBQVksTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRztFQUNyQyxJQUFJO0lBQ0Y7RUFDRixFQUFFLE9BQU8sT0FBTztJQUNkLElBQUksWUFBWTtNQUNkLElBQUksaUJBQWlCLFVBQVUsT0FBTztRQUNwQyxNQUFNLElBQUksZUFBZSxDQUFDLDZCQUE2QixFQUFFLFVBQVUsQ0FBQztNQUN0RTtNQUNBLGNBQ0UsT0FDQSxZQUNBLGFBQ0E7SUFFSjtJQUNBLE1BQU07SUFDTixZQUFZO0VBQ2Q7RUFDQSxJQUFJLENBQUMsV0FBVztJQUNkLE1BQU0sQ0FBQywwQkFBMEIsRUFBRSxVQUFVLENBQUM7SUFDOUMsTUFBTSxJQUFJLGVBQWU7RUFDM0I7RUFDQSxPQUFPO0FBQ1QifQ==
// denoCacheMetadata=15968800687832913387,14913134499905327723